const path = require("path");
const fs = require("fs-extra");
const botModule = require("../bot");
const { saveToCacheAndSync } = botModule;

jest.mock("../modules/ui_messages", () => ({
  processingFile: "üõ† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...",
  generatingPrompt: (part, total) => `ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —á–∞—Å—Ç–∏ ${part} –∏–∑ ${total}...`,
  promptSent: "ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ –º–æ–¥–µ–ª—å...",
  modelAnswerReceived: "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω.",
  savingToCache: "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à –∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫...",
  cacheSynced: "‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω!",
  searchingLocalCache: "üîé –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ...",
  searchingYadisk: "‚è≥ –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ...",
  answerFromCache: "‚úÖ –û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ!",
  answerFromYadisk: "‚úÖ –û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ!",
  generatingAI: "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò...",
  answerSaved: "‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à!",
  error: (msg) => `‚ùå –û—à–∏–±–∫–∞: ${msg}`,
}));

jest.mock("../modules/cache_export", () => ({
  exportCacheToJsonFile: jest.fn((localPath, cb) => cb(null)),
  uploadCacheJsonToYadisk: jest.fn(() => Promise.resolve(true)),
}));

afterEach(() => {
  jest.clearAllMocks();
});

describe("bot.js –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç", () => {
  it("mainMenuKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", () => {
    expect(typeof botModule.mainMenuKeyboard).toBe('function');
    const keyboard = botModule.mainMenuKeyboard();
    expect(keyboard.reply_markup.inline_keyboard.length).toBeGreaterThan(0);
  });

  it("splitTextByLength –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç", () => {
    expect(typeof botModule.splitTextByLength).toBe('function');
    const text = "a".repeat(1500);
    const parts = botModule.splitTextByLength(text, 700);
    expect(parts.length).toBe(3);
    expect(parts[0].length).toBe(700);
    expect(parts[1].length).toBe(700);
    expect(parts[2].length).toBe(100);
  });

  it("parseDocxToText –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞", async () => {
    expect(typeof botModule.parseDocxToText).toBe('function');
    await expect(botModule.parseDocxToText("no_such_file.docx")).rejects.toThrow();
  });

  it("saveToCacheAndSync –≤—ã–∑—ã–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –∏ –∑–∞–≥—Ä—É–∑–∫—É –∫—ç—à–∞", async () => {
    const question = "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å " + Date.now();
    const answer = "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç";
    const ctx = { reply: jest.fn() };
    await saveToCacheAndSync(question, answer, ctx);
    await new Promise(r => setTimeout(r, 100));
    expect(ctx.reply).toHaveBeenCalledWith("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω!");
  });

  it("fuzzyFindInYandexDisk –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –ø—Ä–∏ –æ—à–∏–±–∫–µ", async () => {
    // –ú–æ–∫–∞–µ–º yadisk, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
    if (botModule.yadisk) {
      botModule.yadisk.downloadFileByPath = async () => { throw new Error("fail"); };
      const result = await botModule.fuzzyFindInYandexDisk("test");
      expect(result).toBeNull();
    }
  });

  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è processCacheQueue, –µ—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ –∏ –º–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
});