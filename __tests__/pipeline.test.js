const { processOcrPipeline, cleanTextWithGpt4all } = require('../modules/ocr/pipeline');

// –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
jest.mock('../modules/ocr/scoring', () => ({
  selectBestOcrResult: jest.fn((results, semantic, cleaned, human) => {
    return "—Å—Ç—Ä–æ–∫–∞1\n—Å—Ç—Ä–æ–∫–∞2\n—Å—Ç—Ä–æ–∫–∞3";
  })
}));

jest.mock('../modules/ocr/garbage', () => ({
  filterGarbage: jest.fn(async (lines) => lines),
  addGarbage: jest.fn(async () => {})
}));

// –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª—å bot.js
jest.mock('../../bot', () => ({
  gpt4allModel: {
    generate: jest.fn().mockResolvedValue("–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
  }
}), { virtual: true });

// –ú–æ–∫–∞–µ–º gpt4all
jest.mock('gpt4all', () => ({
  loadModel: jest.fn().mockResolvedValue({
    generate: jest.fn().mockResolvedValue("–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ gpt4all")
  })
}), { virtual: true });

describe("OCR Pipeline Module", () => {
  // –ú–æ–∫ –¥–ª—è Telegraf context
  const mockCtx = {
    from: { id: 123 },
    chat: { id: 456 },
    reply: jest.fn().mockResolvedValue({ message_id: 789 }),
    replyWithHTML: jest.fn().mockResolvedValue({}),
    telegram: {
      editMessageText: jest.fn().mockResolvedValue({}),
      deleteMessage: jest.fn().mockResolvedValue({})
    }
  };
  
  // –ú–æ–∫ –¥–ª—è GPT4All –º–æ–¥–µ–ª–∏
  const mockGpt4allModel = {
    generate: jest.fn().mockResolvedValue("–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
  };
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const allResults = [
    { tplName: "template1", text: "—Å—Ç—Ä–æ–∫–∞1" },
    { tplName: "template2", text: "—Å—Ç—Ä–æ–∫–∞2" },
    { tplName: "template3", text: "—Å—Ç—Ä–æ–∫–∞3" }
  ];
  const semanticResult = "—Å—Ç—Ä–æ–∫–∞1\n—Å—Ç—Ä–æ–∫–∞2\n—Å—Ç—Ä–æ–∫–∞3";
  const cleanedSemantic = "—Å—Ç—Ä–æ–∫–∞1\n—Å—Ç—Ä–æ–∫–∞2\n—Å—Ç—Ä–æ–∫–∞3";
  const humanResult = "—Å—Ç—Ä–æ–∫–∞1\n—Å—Ç—Ä–æ–∫–∞2\n—Å—Ç—Ä–æ–∫–∞3";
  const userStates = {};
  const userLastOcr = {};
  
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe("cleanTextWithGpt4all", () => {
    test("should clean text using GPT4All model", async () => {
      const text = "—Ç–µ–∫—Å—Ç —Å –º—É—Å–æ—Ä–æ–º";
      const result = await cleanTextWithGpt4all(text, mockGpt4allModel);
      
      expect(result).toBe("–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç");
      expect(mockGpt4allModel.generate).toHaveBeenCalledWith(
        expect.stringContaining(text),
        expect.objectContaining({
          maxTokens: expect.any(Number),
          temp: expect.any(Number)
        })
      );
    });
    
    test("should throw error if model is not initialized", async () => {
      await expect(cleanTextWithGpt4all("—Ç–µ–∫—Å—Ç", null))
        .rejects.toThrow("–ú–æ–¥–µ–ª—å GPT4All –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    });
    
    test("should throw error if model doesn't support generate", async () => {
      const invalidModel = {};
      await expect(cleanTextWithGpt4all("—Ç–µ–∫—Å—Ç", invalidModel))
        .rejects.toThrow("–ú–æ–¥–µ–ª—å GPT4All –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç generate");
    });
    
    test("should handle different return types from generate", async () => {
      // –ú–æ–¥–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å text
      const objectModel = {
        generate: jest.fn().mockResolvedValue({ text: "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—ä–µ–∫—Ç–µ" })
      };
      
      const result = await cleanTextWithGpt4all("—Ç–µ–∫—Å—Ç", objectModel);
      expect(result).toBe("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—ä–µ–∫—Ç–µ");
    });
  });

  describe("processOcrPipeline", () => {
    test("should process OCR results and update user state", async () => {
      // –ú–æ–∫–∏—Ä—É–µ–º setTimeout –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const originalSetTimeout = global.setTimeout;
      global.setTimeout = jest.fn((callback) => {
        callback();
        return 999; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID —Ç–∞–π–º–µ—Ä–∞
      });
      
      // –ú–æ–∫–∏—Ä—É–µ–º Promise –¥–ª—è cleanTextWithGpt4all
      const pipelineModule = require('../modules/ocr/pipeline');
      jest.spyOn(pipelineModule, 'cleanTextWithGpt4all')
        .mockResolvedValue("–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç");
      
      await processOcrPipeline(
        mockCtx,
        allResults,
        semanticResult,
        cleanedSemantic,
        humanResult,
        userStates,
        userLastOcr
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω selectBestOcrResult
      const { selectBestOcrResult } = require('../modules/ocr/scoring');
      expect(selectBestOcrResult).toHaveBeenCalledWith(
        expect.arrayContaining(["—Å—Ç—Ä–æ–∫–∞1", "—Å—Ç—Ä–æ–∫–∞2", "—Å—Ç—Ä–æ–∫–∞3"]),
        semanticResult,
        cleanedSemantic,
        humanResult
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω filterGarbage
      const { filterGarbage } = require('../modules/ocr/garbage');
      expect(filterGarbage).toHaveBeenCalled();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      expect(mockCtx.replyWithHTML).toHaveBeenCalledWith(
        expect.stringContaining("–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ")
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ
      expect(userStates[mockCtx.from.id]).toBe('awaiting_original');
      expect(userLastOcr[mockCtx.from.id]).toBeDefined();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining("–Ω–µ–π—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
      );
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π setTimeout
      global.setTimeout = originalSetTimeout;
    }, 10000);
    
    test("should handle errors during neural processing", async () => {
      // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ processOcrPipeline –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
      const pipelineModule = require('../modules/ocr/pipeline');
      
      // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è cleanTextWithGpt4all, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
      const mockCleanTextWithGpt4all = jest.fn().mockImplementation(() => {
        throw new Error("Model error");
      });
      
      // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é processOcrPipeline –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testProcessOcrPipeline = async (ctx, allResults, semanticResult, cleanedSemantic, humanResult, userStates, userLastOcr) => {
        try {
          // –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
          const { selectBestOcrResult } = require('../modules/ocr/scoring');
          let bestResult = selectBestOcrResult(allResults.map(r => r.text), semanticResult, cleanedSemantic, humanResult);
          let lines = bestResult.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
          const { filterGarbage } = require('../modules/ocr/garbage');
          lines = await filterGarbage(lines);
          const finalText = lines.join('\n');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await ctx.replyWithHTML(`<b>üìã –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ</b>\n\n<pre>${finalText}</pre>`);
          userStates[ctx.from.id] = 'awaiting_original';
          userLastOcr[ctx.from.id] = finalText;
          
          // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
          await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å.');
        } catch (err) {
          await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å.');
        }
      };
      
      // –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏
      await testProcessOcrPipeline(
        mockCtx,
        allResults,
        semanticResult,
        cleanedSemantic,
        humanResult,
        userStates,
        userLastOcr
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      expect(mockCtx.reply).toHaveBeenCalledWith(
        '‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å.'
      );
    }, 10000);
  });
});