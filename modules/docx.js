const mammoth = require("mammoth");
const fs = require("fs-extra");
const path = require("path");

class DocxProcessor {
    constructor(materialsPath = path.join(__dirname, "..", "materials")) {
        this.materialsPath = materialsPath;
    }

    async extractText(filePath) {
        try {
            console.log(`üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
            const result = await mammoth.extractRawText({ path: filePath });
            console.log(`‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω (–¥–ª–∏–Ω–∞: ${result.value.length})`);
            return result.value.trim();
        } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
            return "";
        }
    }

    async listFiles() {
        try {
            console.log('üîç –ß—Ç–µ–Ω–∏–µ –ø–∞–ø–∫–∏ materials...');
            const items = await fs.readdir(this.materialsPath);
            const files = items.filter(item => item.endsWith(".docx"));
            
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ .docx —Ñ–∞–π–ª–æ–≤: ${files.length}`);
            console.log(`üìÅ –§–∞–π–ª—ã: ${files.join(', ')}`);
            
            return files;
        } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:", err);
            return [];
        }
    }
}

module.exports = new DocxProcessor();
