// –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR
// –ó–¥–µ—Å—å orchestrate –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å: –≤—ã–∑–æ–≤—ã —à–∞–±–ª–æ–Ω–æ–≤, –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞

const { selectBestOcrResult } = require('./scoring');
const { filterGarbage, addGarbage } = require('./garbage');

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ bot.js
 * @param {Object} ctx - Telegraf context
 * @param {Array} allResults - –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º [{tplName, text}]
 * @param {string} semanticResult - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏
 * @param {string} cleanedSemantic - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ LanguageTool
 * @param {string} humanResult - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è Telegram
 * @param {Object} userStates - –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {Object} userLastOcr - –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
async function processOcrPipeline(ctx, allResults, semanticResult, cleanedSemantic, humanResult, userStates, userLastOcr) {
  let bestResult = selectBestOcrResult(allResults.map(r => r.text), semanticResult, cleanedSemantic, humanResult);
  let lines = bestResult.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
  lines = await filterGarbage(lines);
  const importantWords = ['–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ', '—Å–∫–∞—á–∞–π—Ç–µ', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–º–∞–≥–∞–∑–∏–Ω', '—Å–µ—Ä–≤–∏—Å', '—ç–≤–æ', '–∫–∞—Å–æ–≤—ã–µ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–∞–¥—Ä–µ—Å', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∏–Ω–Ω'];
  let garbageCandidates = [];
  const filtered = lines.filter(line => {
    const clean = line.trim();
    if (clean.length < 5) {
      garbageCandidates.push(line);
      return false;
    }
    if ((clean.match(/[–ê-–Ø–∞-—è–Å—ë]/g) || []).length < 3 && !importantWords.some(w => clean.toLowerCase().includes(w))) {
      garbageCandidates.push(line);
      return false;
    }
    return true;
  });
  await addGarbage(garbageCandidates);
  const finalText = filtered.join('\n');
  await ctx.replyWithHTML(
    `<b>üìã –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É)</b>\n\n<pre>${finalText}</pre>`
  );
  userStates[ctx.from.id] = 'awaiting_original';
  userLastOcr[ctx.from.id] = finalText;
  await ctx.reply('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.');
}

module.exports = {
  processOcrPipeline
};
