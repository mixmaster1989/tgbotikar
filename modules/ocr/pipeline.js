// –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR
// –ó–¥–µ—Å—å orchestrate –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å: –≤—ã–∑–æ–≤—ã —à–∞–±–ª–æ–Ω–æ–≤, –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞

const { selectBestOcrResult } = require('./scoring');
const { filterGarbage, addGarbage } = require('./garbage');

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ GPT4All.
 * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
 * @param {object} gpt4allModel - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å GPT4All
 * @returns {Promise<string>} - –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
async function cleanTextWithGpt4all(text, gpt4allModel) {
  if (!gpt4allModel) throw new Error("–ú–æ–¥–µ–ª—å GPT4All –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
  const prompt = `–û—á–∏—Å—Ç–∏ –æ—Ç –º—É—Å–æ—Ä–∞, –≤—ã–≤–µ–¥–∏ –æ—á–∏—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n${text}`;
  const options = {
    maxTokens: 200,
    temp: 0.3,
    topK: 20,
    topP: 0.7,
  };
  // –ï—Å–ª–∏ —É –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å generate(prompt, options), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (typeof gpt4allModel.generate === "function") {
    // –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö generate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { text }, –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö ‚Äî —Å—Ç—Ä–æ–∫—É
    const result = await gpt4allModel.generate(prompt, options);
    return typeof result === "string" ? result : (result.text || "");
  }
  throw new Error("–ú–æ–¥–µ–ª—å GPT4All –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç generate");
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ bot.js
 * @param {Object} ctx - Telegraf context
 * @param {Array} allResults - –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º [{tplName, text}]
 * @param {string} semanticResult - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏
 * @param {string} cleanedSemantic - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ LanguageTool
 * @param {string} humanResult - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è Telegram
 * @param {Object} userStates - –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {Object} userLastOcr - –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
async function processOcrPipeline(ctx, allResults, semanticResult, cleanedSemantic, humanResult, userStates, userLastOcr) {
  let bestResult = selectBestOcrResult(allResults.map(r => r.text), semanticResult, cleanedSemantic, humanResult);
  let lines = bestResult.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
  lines = await filterGarbage(lines);
  const importantWords = ['–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ', '—Å–∫–∞—á–∞–π—Ç–µ', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–º–∞–≥–∞–∑–∏–Ω', '—Å–µ—Ä–≤–∏—Å', '—ç–≤–æ', '–∫–∞—Å–æ–≤—ã–µ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–∞–¥—Ä–µ—Å', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∏–Ω–Ω'];
  let garbageCandidates = [];
  const filtered = lines.filter(line => {
    const clean = line.trim();
    if (clean.length < 5) {
      garbageCandidates.push(line);
      return false;
    }
    if ((clean.match(/[–ê-–Ø–∞-—è–Å—ë]/g) || []).length < 3 && !importantWords.some(w => clean.toLowerCase().includes(w))) {
      garbageCandidates.push(line);
      return false;
    }
    return true;
  });
  await addGarbage(garbageCandidates);
  const finalText = filtered.join('\n');
  await ctx.replyWithHTML(
    `<b>üìã –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É)</b>\n\n<pre>${finalText}</pre>`
  );
  userStates[ctx.from.id] = 'awaiting_original';
  userLastOcr[ctx.from.id] = finalText;
  await ctx.reply('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.');

  // --- –ù–æ–≤—ã–π —ç—Ç–∞–ø: –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é ---
  try {
    // –ü–æ–ª—É—á–∞–µ–º gpt4allModel –∏–∑ bot.js —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å (–µ—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è) –∏–ª–∏ —á–µ—Ä–µ–∑ require
    let gpt4allModel;
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ bot.js (–µ—Å–ª–∏ –æ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è)
      gpt4allModel = require('../../bot').gpt4allModel;
      if (!gpt4allModel) throw new Error();
    } catch {
      // –ï—Å–ª–∏ –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª—å—à–µ)
      const gpt4all = require("gpt4all");
      const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
      gpt4allModel = await gpt4all.loadModel(modelName);
    }
    const cleaned = await cleanTextWithGpt4all(finalText, gpt4allModel);
    await ctx.replyWithHTML(`<b>üßπ –û—á–∏—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:</b>\n\n<pre>${cleaned.trim()}</pre>`);
  } catch (err) {
    await ctx.reply('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å.');
  }
}

module.exports = {
  processOcrPipeline,
  cleanTextWithGpt4all // —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤/–¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
};
