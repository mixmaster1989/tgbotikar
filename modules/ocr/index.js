// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –ø—É—Ç—è–º–∏
const fs = require("fs-extra");
const path = require("path");
const tesseract = require("tesseract.js");

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Markup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ Telegraf
const { Markup } = require("telegraf");

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OCR
const { getTemplates } = require("./templates"); // –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ OCR
const { mergeOcrResultsNoDuplicates } = require("./scoring"); // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
const logger = require("../logger");

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const tempPath = path.join(__dirname, "..", "..", "temp");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ OCR
function registerOcrHandlers(bot) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  bot.on("photo", async (ctx) => {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É)
    const photo = ctx.message.photo.pop();

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
    const fileId = photo.file_id;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é Telegram API
    const fileLink = await ctx.telegram.getFileLink(fileId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    const filePath = path.join(tempPath, `${ctx.from.id}_${Date.now()}.jpg`);

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.ensureDir(tempPath);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ
    const res = await fetch(fileLink.href);
    const buffer = await res.arrayBuffer();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    await fs.writeFile(filePath, Buffer.from(buffer));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.session.lastPhotoPath = filePath;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR:", Markup.inlineKeyboard([
      [{ text: '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Å–µ–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏', callback_data: 'ocr_all_templates' }]
    ]));
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Å–µ–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏"
  bot.action("ocr_all_templates", async (ctx) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–æ—Ç–æ –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const filePath = ctx.session && ctx.session.lastPhotoPath;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
      if (!filePath || !fs.existsSync(filePath)) {
        await ctx.reply("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è OCR
      const templates = getTemplates();

      // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR
      const allResults = [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∫–∞–∂–¥—ã–º —à–∞–±–ª–æ–Ω–æ–º
      for (const tpl of templates) {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞
        const { recognizeTextWithTemplateTesseract } = require("./pipeline");

        // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —à–∞–±–ª–æ–Ω–æ–º
        const tesseractText = await recognizeTextWithTemplateTesseract(filePath, tpl.pre, tpl.post);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞—Å—Å–∏–≤
        allResults.push({ tplName: tpl.name, text: tesseractText });
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤, —É–¥–∞–ª—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã
      const mergedText = mergeOcrResultsNoDuplicates(allResults);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
      await ctx.replyWithHTML(`<b>üìã –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>\n\n<pre>${mergedText}</pre>`);
    } catch (e) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      logger.error("–û—à–∏–±–∫–∞ OCR: " + e.message);
      await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: " + e.message);
    }
  });
}

async function recognizeTextWithTemplateTesseract(imagePath, preProcessing, postProcessing) {
    try {
        const imageBuffer = await fs.readFile(imagePath);
        const { data: { text } } = await tesseract.recognize(imageBuffer, "eng", {
            preProcessing,
            postProcessing
        });
        return text;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:", error);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
module.exports = { 
  registerOcrHandlers,
  recognizeTextWithTemplateTesseract
};
