const { Markup } = require('telegraf');
const logger = require('./logger');

class BotHandlers {
    static setupMainMenu(bot) {
        const mainMenuKeyboard = Markup.keyboard([
            ['üìö –ö—ç—à', 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è'],
            ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        ]).resize().oneTime(false);

        bot.command('start', (ctx) => {
            logger.info(`User ${ctx.from.username} started the bot`);
            ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenuKeyboard);
        });

        bot.hears('üìö –ö—ç—à', (ctx) => {
            logger.info(`User ${ctx.from.username} opened Cache menu`);
            ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º', {
                reply_markup: {
                    keyboard: [
                        ['üìã –°–ø–∏—Å–æ–∫ –∫—ç—à–∞', 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à'],
                        ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
        });

        bot.hears('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', (ctx) => {
            logger.info(`User ${ctx.from.username} opened Generation menu`);
            ctx.reply('–†–µ–∂–∏–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', {
                reply_markup: {
                    keyboard: [
                        ['‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç-–∫—ç—à', '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç-–∫—ç—à'],
                        ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
        });

        bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => {
            logger.info(`User ${ctx.from.username} opened Statistics menu`);
            ctx.reply('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞', {
                reply_markup: {
                    keyboard: [
                        ['üìà –ö—ç—à', 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è'],
                        ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
        });

        bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', (ctx) => {
            logger.info(`User ${ctx.from.username} opened Settings menu`);
            ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', {
                reply_markup: {
                    keyboard: [
                        ['üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã', 'üìù –õ–æ–≥–∏'],
                        ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
        });

        bot.hears('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (ctx) => {
            logger.info(`User ${ctx.from.username} returned to main menu`);
            ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–º–µ–Ω—é
        bot.hears('üìã –°–ø–∏—Å–æ–∫ –∫—ç—à–∞', (ctx) => {
            logger.info(`User ${ctx.from.username} requested cache list`);
            ctx.reply('–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—ç—à–∞');
        });

        bot.hears('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à', (ctx) => {
            logger.info(`User ${ctx.from.username} requested cache clear`);
            ctx.reply('–ö—ç—à –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω');
        });

        bot.hears('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç-–∫—ç—à', (ctx) => {
            logger.info(`User ${ctx.from.username} started test cache`);
            ctx.reply('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∫—ç—à–∞');
        });

        bot.hears('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç-–∫—ç—à', (ctx) => {
            logger.info(`User ${ctx.from.username} stopped test cache`);
            ctx.reply('–¢–µ—Å—Ç –∫—ç—à–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });
    }
}

module.exports = BotHandlers;
