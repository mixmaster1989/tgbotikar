const { Markup } = require('telegraf');
const logger = require('./logger');

class BotHandlers {
    static setupMainMenu(bot) {
        logger.info('Initializing bot handlers...');

        const mainMenuKeyboard = Markup.keyboard([
            ['üìö –ö—ç—à', 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è'],
            ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        ]).resize().oneTime(false);

        bot.command('start', (ctx) => {
            try {
                logger.info(`User ${ctx.from.username} started the bot`);
                ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenuKeyboard);
            } catch (error) {
                logger.error('Error in start command', { error, user: ctx.from });
            }
        });

        const menuHandlers = [
            { text: 'üìö –ö—ç—à', description: 'Cache menu', submenu: [
                ['üìã –°–ø–∏—Å–æ–∫ –∫—ç—à–∞', 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à']
            ]},
            { text: 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', description: 'Generation menu', submenu: [
                ['‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç-–∫—ç—à', '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç-–∫—ç—à']
            ]},
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', description: 'Statistics menu', submenu: [
                ['üìà –ö—ç—à', 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è']
            ]},
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', description: 'Settings menu', submenu: [
                ['üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã', 'üìù –õ–æ–≥–∏']
            ]}
        ];

        menuHandlers.forEach(menu => {
            bot.hears(menu.text, (ctx) => {
                try {
                    logger.info(`User ${ctx.from.username} opened ${menu.description}`);
                    ctx.reply(menu.description, {
                        reply_markup: {
                            keyboard: [
                                ...menu.submenu,
                                ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                            ],
                            resize_keyboard: true
                        }
                    });
                } catch (error) {
                    logger.error(`Error in ${menu.text} handler`, { error, user: ctx.from });
                }
            });
        });

        bot.hears('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (ctx) => {
            try {
                logger.info(`User ${ctx.from.username} returned to main menu`);
                ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard);
            } catch (error) {
                logger.error('Error returning to main menu', { error, user: ctx.from });
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–º–µ–Ω—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const subMenuHandlers = [
            { text: 'üìã –°–ø–∏—Å–æ–∫ –∫—ç—à–∞', action: 'Requesting cache list' },
            { text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à', action: 'Clearing cache' },
            { text: '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç-–∫—ç—à', action: 'Starting test cache' },
            { text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç-–∫—ç—à', action: 'Stopping test cache' }
        ];

        subMenuHandlers.forEach(handler => {
            bot.hears(handler.text, (ctx) => {
                try {
                    logger.info(`User ${ctx.from.username} ${handler.action}`);
                    ctx.reply(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${handler.action}`);
                } catch (error) {
                    logger.error(`Error in ${handler.text} handler`, { error, user: ctx.from });
                }
            });
        });

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        bot.on('text', (ctx) => {
            logger.warn(`Unhandled message from ${ctx.from.username}: ${ctx.message.text}`);
            ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.');
        });
    }
}

module.exports = BotHandlers;
