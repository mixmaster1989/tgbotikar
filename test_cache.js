const sqlite3 = require("sqlite3").verbose();
const mammoth = require("mammoth");
const gpt4all = require("gpt4all");
const path = require("path");
const os = require("os");
const fs = require("fs");

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all");
const materialsPath = path.join(__dirname, "materials");
const db = new sqlite3.Database("database.sqlite");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
function initDatabase() {
    db.run(
        `CREATE TABLE IF NOT EXISTS gpt_cache (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            prompt TEXT UNIQUE,
            response TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )`,
        (err) => {
            if (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", err);
            } else {
                console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ gpt_cache –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
            }
        }
    );
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX
async function parseDocxToText(filePath) {
    try {
        console.log(`–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
        const result = await mammoth.extractRawText({ path: filePath });
        console.log(`–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω (–¥–ª–∏–Ω–∞: ${result.value.length})`);
        return result.value.trim();
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        return "";
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT4All –º–æ–¥–µ–ª–∏
async function initGPT4AllModel() {
    try {
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT4All –º–æ–¥–µ–ª–∏...");
        const model = await gpt4all.loadModel(modelName);
        return {
            generate: async (prompt, options = {}) => {
                try {
                    const answer = await model.generate(prompt, options);
                    return answer.text;
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
                    return null;
                }
            }
        };
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPT4All:", error);
        return null;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫—ç—à
async function cacheResponse(prompt, response) {
    return new Promise((resolve, reject) => {
        db.run(
            "INSERT INTO gpt_cache (prompt, response) VALUES (?, ?)",
            [prompt, response],
            (err) => {
                if (err) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫—ç—à:", err);
                    reject(err);
                } else {
                    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à");
                    resolve();
                }
            }
        );
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∫—ç—à–∞
function getCachedResponse(prompt) {
    return new Promise((resolve, reject) => {
        db.get(
            "SELECT response FROM gpt_cache WHERE prompt = ?",
            [prompt],
            (err, row) => {
                if (err) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—ç—à–∞:", err);
                    reject(err);
                } else {
                    resolve(row ? row.response : null);
                }
            }
        );
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞)
function levenshteinDistance(str1, str2) {
    const m = str1.length;
    const n = str2.length;
    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));

    for (let i = 0; i <= m; i++) {
        dp[i][0] = i;
    }
    for (let j = 0; j <= n; j++) {
        dp[0][j] = j;
    }

    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (str1[i - 1] === str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = Math.min(
                    dp[i - 1][j - 1] + 1,
                    dp[i - 1][j] + 1,
                    dp[i][j - 1] + 1
                );
            }
        }
    }

    return 1 - (dp[m][n] / Math.max(m, n)); // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏
}

// –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
async function findSimilarPrompt(prompt) {
    return new Promise((resolve, reject) => {
        db.all("SELECT prompt, response FROM gpt_cache", (err, rows) => {
            if (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—ç—à–∞:", err);
                reject(err);
            } else {
                let bestMatch = null;
                let highestSimilarity = 0;

                // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –æ—Ç –æ–±—â–∏—Ö —á–∞—Å—Ç–µ–π –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                const cleanPrompt = prompt
                    .replace(/\\n\\n.*$/s, '') // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ \n\n
                    .toLowerCase()
                    .trim();

                rows.forEach((row) => {
                    const cleanRowPrompt = row.prompt
                        .replace(/\\n\\n.*$/s, '')
                        .toLowerCase()
                        .trim();

                    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å —Å—Ç—Ä–æ–∫
                    const similarity = levenshteinDistance(cleanPrompt, cleanRowPrompt);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    const promptWords = new Set(cleanPrompt.split(/\s+/));
                    const rowWords = new Set(cleanRowPrompt.split(/\s+/));
                    const commonWords = [...promptWords].filter(word => rowWords.has(word));
                    const wordSimilarity = commonWords.length / Math.max(promptWords.size, rowWords.size);

                    // –û–±—â–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å - —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–æ–º –∏ —Å—Ö–æ–∂–µ—Å—Ç—å—é —Å–ª–æ–≤
                    const totalSimilarity = (similarity + wordSimilarity) / 2;

                    if (totalSimilarity > highestSimilarity) {
                        highestSimilarity = totalSimilarity;
                        bestMatch = row;
                    }
                });

                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–æ 0.95 (95%)
                if (highestSimilarity > 0.95) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º —Å—Ö–æ–∂–µ—Å—Ç–∏ ${highestSimilarity.toFixed(3)}`);
                    resolve(bestMatch);
                } else {
                    resolve(null);
                }
            }
        });
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö .docx —Ñ–∞–π–ª–æ–≤
async function getAllDocxFiles() {
    return new Promise((resolve, reject) => {
        fs.readdir(materialsPath, (err, files) => {
            if (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ materials:", err);
                reject(err);
            } else {
                const docxFiles = files.filter(file => file.endsWith('.docx'));
                console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${docxFiles.length} .docx —Ñ–∞–π–ª–æ–≤`);
                resolve(docxFiles);
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫—ç—à–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç
async function exportCacheToDataset() {
    return new Promise((resolve, reject) => {
        db.all("SELECT prompt, response FROM gpt_cache", async (err, rows) => {
            if (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—ç—à–∞:", err);
                reject(err);
                return;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            const dataset = rows.map(row => ({
                instruction: row.prompt,
                input: "",  // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –≤ instruction
                output: row.response,
                history: [] // –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–ø—É—Å—Ç–∞—è –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
            }));

            try {
                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                const datasetDir = path.join(__dirname, "dataset");
                if (!fs.existsSync(datasetDir)) {
                    fs.mkdirSync(datasetDir);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç –≤ JSON —Ñ–∞–π–ª
                const timestamp = new Date().toISOString().replace(/[:]/g, '-');
                const filename = path.join(datasetDir, `dataset_${timestamp}.json`);

                fs.writeFileSync(
                    filename,
                    JSON.stringify(dataset, null, 2),
                    'utf8'
                );

                console.log(`‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filename}`);
                console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: ${dataset.length}`);

                resolve(filename);
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞:", error);
                reject(error);
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async function generatePromptFromContext(model, text) {
    const metaPrompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤–Ω–µ—à–Ω–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –∏ –Ω–µ —Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–π. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞.

–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
${text}

–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å:`;

    console.log("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...");
    const generatedPrompt = await model.generate(metaPrompt, {
        temperature: 0.3,
        top_p: 0.9,
        repeat_penalty: 1.15
    });

    if (!generatedPrompt) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç");
    }

    console.log("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:", generatedPrompt);
    return generatedPrompt;
}

// –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
async function main() {
    initDatabase();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º
    console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT4All –º–æ–¥–µ–ª–∏...");
    const gptModel = await initGPT4AllModel();
    if (!gptModel) {
        console.error("‚ùå –ú–æ–¥–µ–ª—å GPT4All –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        return;
    }
    console.log("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");

    while (true) {
        try {
            const files = await getAllDocxFiles();
            if (files.length === 0) {
                console.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö .docx —Ñ–∞–π–ª–æ–≤");
                return;
            }

            const randomFile = files[Math.floor(Math.random() * files.length)];
            const filePath = path.join(materialsPath, randomFile);
            console.log(`\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${randomFile}`);

            const text = await parseDocxToText(filePath);
            if (!text) {
                console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞");
                continue;
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            const generatedPrompt = await generatePromptFromContext(gptModel, text);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å...");
            const similarPrompt = await findSimilarPrompt(generatedPrompt);
            if (similarPrompt) {
                console.log("‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ:", similarPrompt.response);
                await delay(10000);
                continue;
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            console.log("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –º–æ–¥–µ–ª–∏...");
            const response = await gptModel.generate(generatedPrompt);

            if (!response) {
                console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏");
                continue;
            }

            console.log("üì® –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏:", response);
            await cacheResponse(generatedPrompt, response);

            console.log("üò¥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π...\n");
            await delay(10000);

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏:", error);
            await delay(5000);
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ SIGINT
process.on('SIGINT', async () => {
    console.log('\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');

    try {
        console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—ç—à –≤ –¥–∞—Ç–∞—Å–µ—Ç...');
        await exportCacheToDataset();

        console.log('üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î...');
        db.close();

        console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
        process.exit(1);
    }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
main().catch((err) => {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err);
    db.close();
});