require("dotenv").config();
const { Telegraf, session, Scenes } = require("telegraf");
const { Database } = require("sqlite3").verbose();
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
const db = new Database("database.sqlite");
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS materials (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    content TEXT
  )`);
});
db.serialize(() => {
  db.each(
    "SELECT name FROM sqlite_master WHERE type='table' AND name='materials'",
    (err, row) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã:", err);
      } else if (row) {
        console.log("–¢–∞–±–ª–∏—Ü–∞ materials —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
      } else {
        console.log("–¢–∞–±–ª–∏—Ü–∞ materials –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ photo –≤ —Ç–∞–±–ª–∏—Ü–µ materials
        db.get("PRAGMA table_info(materials)", (err, row) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–æ–ª–±—Ü–∞:", err);
          } else {
            let photoColumnExists = false;
            for (let i = 0; i < row.length; i++) {
              if (row[i].name === "photo") {
                photoColumnExists = true;
                break;
              }
            }
            if (!photoColumnExists) {
              // –ï—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü photo –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
              db.run("ALTER TABLE materials ADD COLUMN photo TEXT", (err) => {
                if (err) {
                  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ photo:", err);
                } else {
                  console.log("–°—Ç–æ–ª–±–µ—Ü photo —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.");
                }
              });
          }
        }
      });
    }
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
const bot = new Telegraf(process.env.BOT_TOKEN);

// Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainMenuInlineKeyboard = {
  inline_keyboard: [
    [{ text: "üß† –¢–µ—Å—Ç—ã", callback_data: "tests" }],
    [{ text: "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data: "materials" }],
    [{ text: "üèÜ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data: "results" }],
  ],
};

const materialsMenuInlineKeyboard = {
  inline_keyboard: [
    [{ text: "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data: "add_material" }],
    [{ text: "–ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
  ],
};

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start(async (ctx) => {
  await ctx.telegram.sendPhoto(
    ctx.chat.id,
    "https://20.img.avito.st/image/1/Celhwra_pQAXbDcIf54Yl-thowrfoaqS3WGnBtlnpwDVJw"
  );
  await ctx.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –ø–æ—Ä—Ç–∞–ª–µ –ò–ö–ê–†!", {
    reply_markup: mainMenuInlineKeyboard,
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
bot.action("tests", (ctx) => {
  ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª ¬´–¢–µ—Å—Ç—ã¬ª.");
});

bot.action("materials", async (ctx) => {
  ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: materialsMenuInlineKeyboard,
  });
  await sendMaterialsList(ctx);
});

bot.action("results", (ctx) => {
  ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª.");
});

// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ

bot.action("back_to_main", (ctx) => {
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", {
    reply_markup: mainMenuInlineKeyboard,
  });
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
// –°–æ–∑–¥–∞—ë–º —Å—Ü–µ–Ω—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
const addMaterialScene = new Scenes.BaseScene("ADD_MATERIAL");

addMaterialScene.enter(async (ctx) => {
  ctx.session.material = {}; // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:");
});

addMaterialScene.on("text", async (ctx) => {
  if (!ctx.session.material.title) {
    ctx.session.material.title = ctx.message.text;
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:");
  } else if (!ctx.session.material.content) {
    ctx.session.material.content = ctx.message.text;
    await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∞—Ç—å–∏:");
  }
});

addMaterialScene.on("photo", async (ctx) => {
  const photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;
  ctx.session.material.photo = photo;

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  db.run(
    "INSERT INTO materials (title, content, photo) VALUES (?, ?, ?)",
    [
      ctx.session.material.title,
      ctx.session.material.content,
      ctx.session.material.photo,
    ],
  (err) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", err);
      ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.");
    } else {
      ctx.reply("–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
    }
  }
);

// –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
await sendMaterialsList(ctx);

await ctx.scene.leave(); // –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
}); // –ó–∞–∫—Ä—ã—Ç–∏–µ addMaterialScene.on("photo")

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
bot.action(/open_material_(\d+)/, async (ctx) => {
  const materialId = ctx.match[1];
  db.get("SELECT * FROM materials WHERE id = ?", [materialId], (err, row) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", err);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.");
    } else {
      ctx.replyWithPhoto(row.photo, {
        caption: `${row.title}\n\n${row.content}`,
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ù–∞–∑–∞–¥", callback_data: "back_to_materials" }],
          ],
        },
      });
    }
  });
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
bot.action("back_to_materials", async (ctx) => {
  await sendMaterialsList(ctx);
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async function sendMaterialsList(ctx) {
  db.all("SELECT * FROM materials", (err, rows) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", err);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
    } else {
      const keyboard = rows.map((row) => [
        {
          text: row.title,
          callback_data: `open_material_${row.id}`,
        },
      ]);
      ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
bot.action(/open_material_(\d+)/, async (ctx) => {
  const materialId = ctx.match[1];
  db.get("SELECT * FROM materials WHERE id = ?", [materialId], (err, row) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", err);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.");
    } else {
      ctx.replyWithPhoto(row.photo, {
        caption: `${row.title}\n\n${row.content}`,
      });
    }
  });
});
// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ü–µ–Ω—É –∫ Stage
const stage = new Scenes.Stage([addMaterialScene]);

bot.use(session());
bot.use(stage.middleware());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
bot.action("add_material", async (ctx) => {
  await ctx.scene.enter("ADD_MATERIAL");
});

// –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
bot.on("text", async (ctx) => {
  const query = ctx.message.text;

  try {
    const results = await searchInDatabase(query);
    if (results.length > 0) {
      ctx.reply(results.join("\n"));
    } else {
      ctx.reply("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    }
  } catch (err) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.");
    console.error(err);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function searchInDatabase(query) {
  return new Promise((resolve, reject) => {
    db.all(
      `SELECT * FROM materials WHERE content LIKE '%${query}%'`,
      (err, rows) => {
        if (err) {
          reject(err);
        } else {
          resolve(rows.map((row) => row.content));
        }
      }
    );
  });
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

// API –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ –¥–∞—à–±–æ—Ä–¥–∞
const express = require("express");
const app = express();

app.get("/tests", (req, res) => {
  res.send("–õ–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞");
});

app.get("/results", (req, res) => {
  res.send("–õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤");
});

app.listen(3000, () => console.log("API server started on port 3000"));
