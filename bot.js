// bot.js ‚Äî –ü–æ–ª–Ω—ã–π —Ä–µ–±–∏–ª–¥ —Å –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é

// === –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ===
const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const fs = require("fs-extra");
const path = require("path");
const os = require("os");
const sqlite3 = require("sqlite3").verbose();
const mammoth = require("mammoth");
const gpt4all = require("gpt4all");
require("dotenv").config();

const YaDiskService = require("./services/yadisk_service");
const yadisk = new YaDiskService(process.env.YANDEX_DISK_TOKEN);

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all");
const materialsPath = path.join(__dirname, "materials");

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
const bot = new Telegraf(BOT_TOKEN);
const app = express();
app.use("/static", express.static(path.join(__dirname, "static")));

const db = new sqlite3.Database("database.sqlite", (err) => {
  if (err) console.error("DB Error:", err);
  else initDatabase();
});

function initDatabase() {
  db.run(
    `CREATE TABLE IF NOT EXISTS gpt_cache (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      prompt TEXT UNIQUE,
      response TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )`
  );
}

let gpt4allModel = null;
async function initGPT4AllModel() {
  const model = await gpt4all.loadModel(modelName);
  return {
    generate: async (prompt) => (await model.generate(prompt)).text,
  };
}

async function parseDocxToText(filePath) {
  const result = await mammoth.extractRawText({ path: filePath });
  return result.value.trim();
}

async function generateAIQuestions(text) {
  const prompt = `–°–æ–∑–¥–∞–π 1 –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É.
–§–æ—Ä–º–∞—Ç:
–í–û–ü–†–û–°: [—Ç–µ–∫—Å—Ç]
–ê) [...]
–ë) [...]
–í) [...]
–ì) [...]
–ü–†–ê–í–ò–õ–¨–ù–´–ô: [–±—É–∫–≤–∞]\n\n–¢–µ–∫—Å—Ç: ${text}`;

  if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
  return await gpt4allModel.generate(prompt);
}

function parseTestResponse(response) {
  const lines = response.split("\n");
  return {
    question: lines[0].replace("–í–û–ü–†–û–°:", "").trim(),
    answers: {
      –ê: lines[1].slice(3).trim(),
      –ë: lines[2].slice(3).trim(),
      –í: lines[3].slice(3).trim(),
      –ì: lines[4].slice(3).trim(),
    },
    correct: lines[5].replace("–ü–†–ê–í–ò–õ–¨–ù–´–ô:", "").trim(),
  };
}

// === –ú–µ–Ω—é –∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
bot.start(async (ctx) => {
  return ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", Markup.inlineKeyboard([
    [Markup.button.callback("üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "materials")],
    [Markup.button.callback("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¢–µ—Å—Ç–∞", "generate_test")],
    [Markup.button.callback("üìä –ö—ç—à", "cache_ops")],
    [Markup.button.callback("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")],
  ]));
});

bot.action("materials", async (ctx) => {
  const files = await yadisk.syncMaterials();
  if (!files.length) return ctx.reply("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");

  const buttons = files.map((f) => [Markup.button.callback(f, `open_${f}`)]);
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", Markup.inlineKeyboard(buttons));
});

bot.action(/open_(.+)/, async (ctx) => {
  const fileName = ctx.match[1];
  const fullPath = path.join(materialsPath, fileName);
  const content = await parseDocxToText(fullPath);
  ctx.replyWithHTML(`<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n\n${content.substring(0, 1500)}...`);
});

bot.action("generate_test", async (ctx) => {
  const files = await yadisk.syncMaterials();
  if (!files.length) return ctx.reply("–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
  const random = files[Math.floor(Math.random() * files.length)];
  const filePath = path.join(materialsPath, random);
  const content = await parseDocxToText(filePath);
  const test = await generateAIQuestions(content);
  const parsed = parseTestResponse(test);
  let message = `‚ùì <b>${parsed.question}</b>\n`;
  for (const key in parsed.answers) {
    message += `\n${key}) ${parsed.answers[key]}`;
  }
  message += `\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${parsed.correct}`;
  ctx.replyWithHTML(message);
});

bot.action("cache_ops", async (ctx) => {
  ctx.reply("üìä –ö—ç—à:", Markup.inlineKeyboard([
    [Markup.button.callback("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", "clear_cache")],
    [Markup.button.callback("–ù–∞–∑–∞–¥", "start")],
  ]));
});

bot.action("clear_cache", async (ctx) => {
  db.run("DELETE FROM gpt_cache", () => ctx.reply("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω"));
});

bot.action("settings", async (ctx) => {
  ctx.reply("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", Markup.inlineKeyboard([
    [Markup.button.callback("üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", "sync_disk")],
    [Markup.button.callback("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏", "check_model")],
    [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "start")],
  ]));
});

bot.action("sync_disk", async (ctx) => {
  const files = await yadisk.syncMaterials();
  ctx.reply(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${files.length} —Ñ–∞–π–ª–æ–≤`);
});

bot.action("check_model", async (ctx) => {
  if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
  ctx.reply("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.");
});

// === –ó–∞–ø—É—Å–∫ ===
(async () => {
  app.listen(PORT, () => console.log(`üåç Web App: http://localhost:${PORT}`));
  await bot.launch();
  console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
})();