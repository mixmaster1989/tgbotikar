const { Telegraf, Markup, session } = require('telegraf');
const express = require('express');
const path = require('path');
const fs = require('fs-extra');
const mammoth = require('mammoth');
require('dotenv').config();

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
const materialsPath = path.join(__dirname, 'materials');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express-—Å–µ—Ä–≤–µ—Ä–∞
const app = express();
const PORT = process.env.PORT || 3000;

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use('/static', express.static(path.join(__dirname, 'static')));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ .docx –≤ HTML
async function parseDocxToHtml(filePath) {
    try {
        const result = await mammoth.convertToHtml({ path: filePath });
        return result.value.trim();
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
async function getMaterialsStructure() {
    const structure = {};
    try {
        const items = await fs.readdir(materialsPath);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏ materials
        const rootFiles = items.filter(item => item.endsWith('.docx'));
        if (rootFiles.length > 0) {
            structure['–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'] = rootFiles;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for (const item of items) {
            const itemPath = path.join(materialsPath, item);
            const isDirectory = await fs.stat(itemPath).then(stat => stat.isDirectory());

            if (isDirectory) {
                structure[item] = {};
                const sections = await fs.readdir(itemPath);

                for (const section of sections) {
                    const sectionPath = path.join(itemPath, section);
                    const isSectionDir = await fs.stat(sectionPath).then(stat => stat.isDirectory());

                    if (isSectionDir) {
                        const files = await fs.readdir(sectionPath);
                        structure[item][section] = files.filter(file => file.endsWith('.docx'));
                    }
                }
            }
        }
        console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', structure); // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', err);
    }
    return structure;
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
app.get('/article/:category?/:section?/:fileName', async (req, res) => {
    const { category, section, fileName } = req.params;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const filePath = path.join(
        materialsPath,
        category || '', // –ï—Å–ª–∏ category –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–µ–Ω—å
        section || '',  // –ï—Å–ª–∏ section –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–µ–Ω—å
        fileName
    );

    if (!fs.existsSync(filePath)) {
        console.error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        return res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    try {
        const htmlContent = await parseDocxToHtml(filePath);
        res.send(`
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>${fileName}</title>
                <link rel="stylesheet" href="/static/styles.css">
            </head>
            <body>
                <div class="container">
                    <div class="article">
                        ${htmlContent}
                    </div>
                    <button class="close-btn" onclick="Telegram.WebApp.close()">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
                <script src="https://telegram.org/js/telegram-web-app.js"></script>
            </body>
            </html>
        `);
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /materials –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
bot.command('materials', async (ctx) => {
    const structure = await getMaterialsStructure();
    const buttons = Object.keys(structure).map(category => [
        Markup.button.callback(category, `category:${category}`)
    ]);

    if (buttons.length === 0) {
        return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.');
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action(/^category:(.+)$/, async (ctx) => {
    const category = ctx.match[1];
    const structure = await getMaterialsStructure();
    const materials = structure[category];

    if (!materials || materials.length === 0) {
        return ctx.reply('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.');
    }

    const buttons = materials.map(material => {
        const callbackData = `material:${encodeURIComponent(category)}::${encodeURIComponent(material)}`;
        if (callbackData.length > 64) {
            console.error(`–î–ª–∏–Ω–∞ callback_data –ø—Ä–µ–≤—ã—à–∞–µ—Ç 64 —Å–∏–º–≤–æ–ª–∞: ${callbackData}`);
            return null;
        }
        return [Markup.button.callback(material, callbackData)];
    }).filter(Boolean); // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è

    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'materials')]);

    await ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:`, Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
bot.action(/^material:(.+)::(.+)$/, async (ctx) => {
    const [category, material] = ctx.match.slice(1);
    const filePath = path.join(materialsPath, category === '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' ? '' : category, material);

    if (!fs.existsSync(filePath)) {
        console.error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        return ctx.reply('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    try {
        const url = `http://89.169.131.216:${PORT}/article/${encodeURIComponent(category)}/${encodeURIComponent(material)}`;
        console.log(`–°—Å—ã–ª–∫–∞ –Ω–∞ Web App: ${url}`);

        await ctx.reply(
            `–û—Ç–∫—Ä–æ–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª "${material}" —á–µ—Ä–µ–∑ Web App:`,
            Markup.inlineKeyboard([
                Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª', url),
                Markup.button.callback('üîô –ù–∞–∑–∞–¥', `category:${category}`)
            ])
        );
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.');
    }
});

// –ó–∞–ø—É—Å–∫ Express-—Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'));
