const { Telegraf, Markup, session } = require('telegraf');
const sqlite3 = require('sqlite3').verbose();
const fetch = require("node-fetch");
const fs = require('fs-extra');
const path = require('path');
const mammoth = require('mammoth');
require('dotenv').config();

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
const materialsPath = path.join(__dirname, 'materials');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
async function getMaterialsStructure() {
    console.log('–°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É materials:', materialsPath);
    const categories = await fs.readdir(materialsPath);
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–∞–ø–∫–µ materials:', categories);

    const structure = {};

    for (const category of categories) {
        const categoryPath = path.join(materialsPath, category);
        const isDirectory = await fs.stat(categoryPath).then(stat => stat.isDirectory());
        console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç: ${category} (–ø–∞–ø–∫–∞: ${isDirectory})`);

        if (isDirectory) {
            structure[category] = {};
            const sections = await fs.readdir(categoryPath);
            console.log(`–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–∞–ø–∫–µ ${category}:`, sections);

            for (const section of sections) {
                const sectionPath = path.join(categoryPath, section);
                const isSectionDirectory = await fs.stat(sectionPath).then(stat => stat.isDirectory());
                console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç: ${section} (–ø–∞–ø–∫–∞: ${isSectionDirectory})`);

                if (isSectionDirectory) {
                    const files = await fs.readdir(sectionPath);
                    console.log(`–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ ${section}:`, files);

                    structure[category][section] = files.filter(file => file.endsWith('.docx'));
                    console.log(`–§–∞–π–ª—ã .docx –≤ –ø–∞–ø–∫–µ ${section}:`, structure[category][section]);
                }
            }
        } else if (category.endsWith('.docx')) {
            structure[category] = null; // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –ø–∞–ø–∫–∞
            console.log(`–§–∞–π–ª .docx –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏ materials: ${category}`);
        }
    }

    console.log('–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', structure);
    return structure;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ .docx —Ñ–∞–π–ª–∞
async function parseDocx(filePath) {
    const options = {
        styleMap: [
            "p[style-name='Heading 1'] => h1",
            "p[style-name='Heading 2'] => h2",
            "p[style-name='Heading 3'] => h3",
            "b => strong",
            "i => em",
            "ul => ul",
            "ol => ol",
            "li => li"
        ]
    };

    console.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: ${filePath}`);

    // –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é mammoth
    const result = await mammoth.convertToHtml({ path: filePath }, options);
    console.log(`HTML-–∫–æ–Ω—Ç–µ–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–π mammoth:\n${result.value}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HTML –≤ —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Telegram (MarkdownV2)
    const htmlContent = result.value.trim();
    console.log(`HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ trim:\n${htmlContent}`);

    const formattedContent = htmlContent
        .replace(/<h1>(.*?)<\/h1>/g, '*$1*') // –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1 —É—Ä–æ–≤–Ω—è -> –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        .replace(/<h2>(.*?)<\/h2>/g, '_$1_') // –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2 —É—Ä–æ–≤–Ω—è -> –∫—É—Ä—Å–∏–≤
        .replace(/<h3>(.*?)<\/h3>/g, '`$1`') // –ó–∞–≥–æ–ª–æ–≤–æ–∫ 3 —É—Ä–æ–≤–Ω—è -> –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        .replace(/<strong>(.*?)<\/strong>/g, '*$1*') // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        .replace(/<em>(.*?)<\/em>/g, '_$1_') // –ö—É—Ä—Å–∏–≤
        .replace(/<ul>/g, '') // –£–±–∏—Ä–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ —Å–ø–∏—Å–∫–∞
        .replace(/<\/ul>/g, '') // –£–±–∏—Ä–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ —Å–ø–∏—Å–∫–∞
        .replace(/<ol>/g, '') // –£–±–∏—Ä–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        .replace(/<\/ol>/g, '') // –£–±–∏—Ä–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        .replace(/<li>(.*?)<\/li>/g, '‚Ä¢ $1') // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ -> "‚Ä¢ —Ç–µ–∫—Å—Ç"
        .replace(/<p>(.*?)<\/p>/g, '$1\n') // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        .replace(/<br\s*\/?>/g, '\n') // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        .replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1'); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2

    console.log(`–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:\n${formattedContent}`);

    return formattedContent;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());
const db = new sqlite3.Database('database.sqlite');

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
fs.ensureDirSync('uploads');

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(ctx) {
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
            [Markup.button.callback('–¢–µ—Å—Ç—ã', 'tests')],
            [Markup.button.callback('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', 'materials')],
            [Markup.button.callback('–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'results')],
            [Markup.button.callback('üóë –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É', 'clear_db')]
        ])
    );
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
    console.log('–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞');
    await showMainMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
bot.action('materials', async (ctx) => {
    const structure = await getMaterialsStructure();
    const buttons = Object.keys(structure).map(category => {
        if (structure[category] === null) {
            return [Markup.button.callback(category, `open_docx:${category}`)];
        } else {
            return [Markup.button.callback(category, `category:${category}`)];
        }
    });
    buttons.push([Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')]);

    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ñ–∞–π–ª:',
        Markup.inlineKeyboard(buttons)
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è .docx —Ñ–∞–π–ª–∞
bot.action(/^open_docx:(.+)$/, async (ctx) => {
    const fileName = ctx.match[1];
    const filePath = path.join(materialsPath, fileName);

    console.log(`–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –Ω–∞–∂–∞—Ç–∞. –ò–º—è —Ñ–∞–π–ª–∞: ${fileName}, –ø—É—Ç—å: ${filePath}`);

    try {
        const content = await parseDocx(filePath);
        console.log(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ "${fileName}" –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:\n${content}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if (content.length > 4096) {
            console.log(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (${content.length} —Å–∏–º–≤–æ–ª–æ–≤). –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏.`);

            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            const chunks = content.match(/.{1,4096}/g);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            for (const chunk of chunks) {
                console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞:\n${chunk}`);
                await ctx.replyWithMarkdownV2(chunk);
            }
        } else {
            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
            console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–ª–∏–∫–æ–º:\n${content}`);
            await ctx.replyWithMarkdownV2(content);
        }
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, err);

        if (err.code === 'EACCES') {
            await ctx.reply('–û—à–∏–±–∫–∞: —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        } else {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
bot.action('main_menu', async (ctx) => {
    await ctx.answerCbQuery();
    await showMainMenu(ctx);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'));
