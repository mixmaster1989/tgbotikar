const { Telegraf, Markup, session } = require('telegraf');
const sqlite3 = require('sqlite3').verbose();
const fetch = require("node-fetch");
const fs = require('fs-extra');
const path = require('path');
const mammoth = require('mammoth');
require('dotenv').config();

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
const materialsPath = path.join(__dirname, 'materials');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
async function getMaterialsStructure() {
    const categories = await fs.readdir(materialsPath);
    const structure = {};

    for (const category of categories) {
        const categoryPath = path.join(materialsPath, category);
        if (await fs.stat(categoryPath).then(stat => stat.isDirectory())) {
            structure[category] = {};
            const sections = await fs.readdir(categoryPath);

            for (const section of sections) {
                const sectionPath = path.join(categoryPath, section);
                if (await fs.stat(sectionPath).then(stat => stat.isDirectory())) {
                    const files = await fs.readdir(sectionPath);
                    structure[category][section] = files.filter(file => file.endsWith('.docx'));
                }
            }
        }
    }

    return structure;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ .docx —Ñ–∞–π–ª–∞
async function parseDocx(filePath) {
    const result = await mammoth.extractRawText({ path: filePath });
    return result.value.trim(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());
const db = new sqlite3.Database('database.sqlite');

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
fs.ensureDirSync('uploads');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS sections (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        category_id INTEGER,
        FOREIGN KEY(category_id) REFERENCES categories(id)
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS articles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        image_path TEXT,
        section_id INTEGER,
        FOREIGN KEY(section_id) REFERENCES sections(id)
    )`);
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.command('start', async (ctx) => {
    return await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
            [Markup.button.callback('–¢–µ—Å—Ç—ã', 'tests')],
            [Markup.button.callback('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', 'materials')],
            [Markup.button.callback('–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'results')],
            [Markup.button.callback('üóë –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É', 'clear_db')]
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
bot.action('materials', async (ctx) => {
    const structure = await getMaterialsStructure();
    const buttons = Object.keys(structure).map(category => [
        Markup.button.callback(category, `category:${category}`)
    ]);
    buttons.push([Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')]);

    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        Markup.inlineKeyboard(buttons)
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action(/^category:(.+)$/, async (ctx) => {
    const category = ctx.match[1];
    const structure = await getMaterialsStructure();
    const sections = structure[category];

    const buttons = Object.keys(sections).map(section => {
        const sanitizedCategory = category.replace(/[^a-zA-Z0-9:_-]/g, '');
        const sanitizedSection = section.replace(/[^a-zA-Z0-9:_-]/g, '');
        return [Markup.button.callback(section, `section:${sanitizedCategory}:${sanitizedSection}`.slice(0, 64))];
    });
    buttons.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'materials')]);
    buttons.push([Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')]);

    await ctx.editMessageText(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:`,
        Markup.inlineKeyboard(buttons)
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞
bot.action(/^section:(.+):(.+)$/, async (ctx) => {
    const [category, section] = ctx.match.slice(1);
    const structure = await getMaterialsStructure();
    const materials = structure[category]?.[section];

    if (!materials) {
        return ctx.reply('Invalid section or category.');
    }

    const buttons = materials.map(material => [
        Markup.button.callback(material, `material:${category}:${section}:${material}`.slice(0, 64))
    ]);
    buttons.push([Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º', `category:${category}`)]);
    buttons.push([Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')]);

    await ctx.editMessageText(`–†–∞–∑–¥–µ–ª: ${section}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:`,
        Markup.inlineKeyboard(buttons)
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
bot.action(/^material:(.+):(.+):(.+)$/, async (ctx) => {
    const [category, section, material] = ctx.match.slice(1);
    const filePath = path.join(materialsPath, category, section, material);

    try {
        const content = await parseDocx(filePath);
        await ctx.reply(`–ú–∞—Ç–µ—Ä–∏–∞–ª: ${material}\n\n${content}`);
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action(/^category:(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const categoryId = parseInt(ctx.match[1]);
    const sections = await getSections(categoryId);

    const buttons = sections.map(section => [
        Markup.button.callback(section.name, `section:${section.id}`)
    ]);
    buttons.push([Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª', `add_section:${categoryId}`)]);
    buttons.push([
        Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'materials'),
        Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')
    ]);

    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
        Markup.inlineKeyboard(buttons)
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞
bot.action(/^section:(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const sectionId = parseInt(ctx.match[1]);
    const articles = await getArticles(sectionId);
    const section = await getSectionById(sectionId);

    const buttons = articles.map(article => [
        Markup.button.callback(article.title, `article:${article.id}`)
    ]);
    buttons.push([Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é', `add_article:${sectionId}`)]);
    buttons.push([
        Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º', `category:${section.category_id}`),
        Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')
    ]);

    await ctx.deleteMessage();
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é:',
        Markup.inlineKeyboard(buttons)
    );
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—å–∏
bot.action(/^article:(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const articleId = parseInt(ctx.match[1]);
    const article = await getArticleById(articleId);
    const section = await getSectionById(article.section_id);

    let caption = `${article.title}\n\n${article.description}`;
    const buttons = [
        [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç—å—è–º', `section:${article.section_id}`)],
        [Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')]
    ];

    if (article.image_path) {
        await ctx.deleteMessage();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if (caption.length > 1024) {
            await ctx.reply(`${article.title}\n\n${article.description}`);
            caption = ""; // –û—á–∏—â–∞–µ–º caption –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        }

        await ctx.replyWithPhoto(
            { source: article.image_path },
            {
                caption,
                ...Markup.inlineKeyboard(buttons)
            }
        );
    } else {
        await ctx.editMessageText(caption,
            Markup.inlineKeyboard(buttons)
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
bot.action('main_menu', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
            [Markup.button.callback('–¢–µ—Å—Ç—ã', 'tests')],
            [Markup.button.callback('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', 'materials')],
            [Markup.button.callback('–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'results')],
            [Markup.button.callback('üóë –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É', 'clear_db')]
        ])
    );
});

// –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot.action('clear_db', async (ctx) => {
    await ctx.answerCbQuery();

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü
    await new Promise((resolve, reject) => {
        db.run('DELETE FROM articles', (err) => {
            if (err) reject(err);
            db.run('DELETE FROM sections', (err) => {
                if (err) reject(err);
                db.run('DELETE FROM categories', (err) => {
                    if (err) reject(err);
                    resolve();
                });
            });
        });
    });

    // –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    await fs.emptyDir('uploads');

    await ctx.editMessageText('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã');
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action('add_category', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    await ctx.deleteMessage();
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
bot.action(/^add_section:(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const categoryId = parseInt(ctx.match[1]);
    ctx.session = { addingSection: categoryId };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:');
    await ctx.deleteMessage();
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
bot.action(/^add_article:(\d+)$/, async (ctx) => {
    console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 'add_article' –≤—ã–∑–≤–∞–Ω."); // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    await ctx.answerCbQuery();
    const sectionId = parseInt(ctx.match[1]);
    console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ —Ä–∞–∑–¥–µ–ª —Å ID: ${sectionId}`); // –õ–æ–≥–∏—Ä—É–µ–º ID —Ä–∞–∑–¥–µ–ª–∞
    ctx.session = { addingArticle: sectionId };
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏:');
    await ctx.deleteMessage();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (ctx.message.text && !ctx.session) {
        await addCategory(ctx.message.text);
        await ctx.reply('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        const categories = await getCategories();
        const buttons = categories.map(cat => [
            Markup.button.callback(cat.name, `category:${cat.id}`)
        ]);
        buttons.push([Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'add_category')]);
        buttons.push([Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')]);

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            Markup.inlineKeyboard(buttons)
        );
        return;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    if (ctx.session?.addingSection) {
        const categoryId = ctx.session.addingSection;
        await addSection(ctx.message.text, categoryId);
        ctx.session = null;

        const sections = await getSections(categoryId);
        const buttons = sections.map(section => [
            Markup.button.callback(section.name, `section:${section.id}`)
        ]);
        buttons.push([Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª', `add_section:${categoryId}`)]);
        buttons.push([
            Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 'materials'),
            Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')
        ]);

        await ctx.reply('–†–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω!');
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
            Markup.inlineKeyboard(buttons)
        );
        return;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ - —ç—Ç–∞–ø 1: –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (ctx.session?.addingArticle && !ctx.session.articleTitle) {
        ctx.session.articleTitle = ctx.message.text;
        console.log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${ctx.session.articleTitle}`); // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:');
        return;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ - —ç—Ç–∞–ø 2: –æ–ø–∏—Å–∞–Ω–∏–µ
    if (ctx.session?.addingArticle && ctx.session.articleTitle && !ctx.session.articleDescription) {
        ctx.session.articleDescription = ctx.message.text;
        console.log(`–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${ctx.session.articleDescription}`); // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Å—Ç–∞—Ç—å–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
        return;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ - —ç—Ç–∞–ø 3: –ø—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ
    if (ctx.session?.addingArticle && ctx.session.articleTitle && ctx.session.articleDescription) {
        const sectionId = ctx.session.addingArticle;
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –±–µ–∑ —Ñ–æ—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª —Å ID: ${sectionId}`); // –õ–æ–≥–∏—Ä—É–µ–º ID —Ä–∞–∑–¥–µ–ª–∞
        await addArticle(
            ctx.session.articleTitle,
            ctx.session.articleDescription,
            null,
            sectionId
        );

        console.log(`–°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: { title: ${ctx.session.articleTitle}, description: ${ctx.session.articleDescription}, sectionId: ${sectionId} }`); // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏

        const section = await getSectionById(sectionId);
        const articles = await getArticles(sectionId);
        const buttons = articles.map(article => [
            Markup.button.callback(article.title, `article:${article.id}`)
        ]);
        buttons.push([Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é', `add_article:${sectionId}`)]);
        buttons.push([
            Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º', `category:${section.category_id}`),
            Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')
        ]);

        ctx.session = null;
        await ctx.reply('–°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é:',
            Markup.inlineKeyboard(buttons)
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å—Ç–∞—Ç–µ–π
bot.on('photo', async (ctx) => {
    if (ctx.session?.addingArticle && ctx.session.articleTitle && ctx.session.articleDescription) {
        const sectionId = ctx.session.addingArticle;
        const photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        const fileName = `${Date.now()}.jpg`;
        const filePath = path.join('uploads', fileName);

        console.log(`–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Å—Ç–∞—Ç—å–∏. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª: ${fileName}`); // –õ–æ–≥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞

        const fileLink = await ctx.telegram.getFileLink(photo);
        const response = await fetch.default(fileLink);
        const buffer = await response.buffer();
        await fs.writeFile(filePath, buffer);

        console.log(`–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${filePath}`); // –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

        await addArticle(
            ctx.session.articleTitle,
            ctx.session.articleDescription,
            filePath,
            sectionId
        );

        console.log(`–°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —Ñ–æ—Ç–æ: { title: ${ctx.session.articleTitle}, description: ${ctx.session.articleDescription}, imagePath: ${filePath}, sectionId: ${sectionId} }`); // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏

        const section = await getSectionById(sectionId);
        const articles = await getArticles(sectionId);
        const buttons = articles.map(article => [
            Markup.button.callback(article.title, `article:${article.id}`)
        ]);
        buttons.push([Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é', `add_article:${sectionId}`)]);
        buttons.push([
            Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º', `category:${section.category_id}`),
            Markup.button.callback('¬´ –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'main_menu')
        ]);

        ctx.session = null;
        await ctx.reply('–°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é:',
            Markup.inlineKeyboard(buttons)
        );
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
function getCategories() {
    return new Promise((resolve, reject) => {
        db.all('SELECT * FROM categories', (err, rows) => {
            if (err) reject(err);
            resolve(rows || []);
        });
    });
}

function getCategoryById(id) {
    return new Promise((resolve, reject) => {
        db.get('SELECT * FROM categories WHERE id = ?', [id], (err, row) => {
            if (err) reject(err);
            resolve(row);
        });
    });
}

function addCategory(name) {
    return new Promise((resolve, reject) => {
        db.run('INSERT INTO categories (name) VALUES (?)', [name], (err) => {
            if (err) reject(err);
            resolve();
        });
    });
}

function getSections(categoryId) {
    return new Promise((resolve, reject) => {
        db.all('SELECT * FROM sections WHERE category_id = ?', [categoryId], (err, rows) => {
            if (err) reject(err);
            resolve(rows || []);
        });
    });
}

function getSectionById(id) {
    return new Promise((resolve, reject) => {
        db.get('SELECT * FROM sections WHERE id = ?', [id], (err, row) => {
            if (err) reject(err);
            resolve(row);
        });
    });
}

function addSection(name, categoryId) {
    return new Promise((resolve, reject) => {
        db.run('INSERT INTO sections (name, category_id) VALUES (?, ?)',
            [name, categoryId], (err) => {
                if (err) reject(err);
                resolve();
            });
    });
}

function getArticles(sectionId) {
    return new Promise((resolve, reject) => {
        db.all('SELECT * FROM articles WHERE section_id = ?', [sectionId], (err, rows) => {
            if (err) reject(err);
            resolve(rows || []);
        });
    });
}

function getArticleById(id) {
    return new Promise((resolve, reject) => {
        db.get('SELECT * FROM articles WHERE id = ?', [id], (err, row) => {
            if (err) reject(err);
            resolve(row);
        });
    });
}

function addArticle(title, description, imagePath, sectionId) {
    return new Promise((resolve, reject) => {
        db.run(
            'INSERT INTO articles (title, description, image_path, section_id) VALUES (?, ?, ?, ?)',
            [title, description, imagePath, sectionId],
            (err) => {
                if (err) reject(err);
                resolve();
            }
        );
    });
}

bot.launch(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'));
