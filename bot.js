// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
const { Telegraf, Markup } = require("telegraf"); // Telegraf –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
const express = require("express"); // Express –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const path = require("path"); // –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏
const fs = require("fs-extra"); // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
const mammoth = require("mammoth"); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX —Ñ–∞–π–ª–æ–≤
const gpt4all = require("gpt4all"); // –õ–æ–∫–∞–ª—å–Ω–∞—è AI –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
require("dotenv").config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const os = require("os"); // –†–∞–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
const sqlite3 = require("sqlite3").verbose(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º SQLite
const { spawn } = require('child_process'); // –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
const YaDiskService = require('./services/yadisk_service');
const yadisk = new YaDiskService(process.env.YANDEX_DISK_TOKEN);

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all"); // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å AI –º–æ–¥–µ–ª—å—é
const finalModelPath = path.join(modelDir, modelName); // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏. –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω.
const materialsPath = path.join(__dirname, "materials"); // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
const PORT = process.env.PORT || 3000; // –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const webAppUrl = `http://89.232.176.215:${PORT}`; // URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const bot = new Telegraf(process.env.BOT_TOKEN, {
    handlerTimeout: 300000 // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–∏–Ω—É—Ç
}); // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const app = express(); // –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app.use("/static", express.static(path.join(__dirname, "static")));

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database("database.sqlite", (err) => {
    if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err);
    } else {
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
        initDatabase();
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
function initDatabase() {
    db.run(
        `CREATE TABLE IF NOT EXISTS gpt_cache (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            prompt TEXT UNIQUE,
            response TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )`,
        (err) => {
            if (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", err);
            } else {
                console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ gpt_cache –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
            }
        }
    );
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
async function startApp() {
    try {
        console.log("üìå –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã");
        console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");

        // 1. –ó–∞–ø—É—Å–∫ Express-—Å–µ—Ä–≤–µ—Ä–∞
        await new Promise((resolve) => {
            app.listen(PORT, () => {
                console.log(`üåê Express-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
                resolve();
            });
        });

        // 2. –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        console.log("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...");
        try {
            await bot.launch();
            console.log("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞:", error);
            process.exit(1);
        }

        // 3. –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞
        console.log("\nüéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!");

        // 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.once('SIGINT', () => {
            console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ SIGINT');
            bot.stop('SIGINT');
            process.exit(0);
        });

        process.once('SIGTERM', () => {
            console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ SIGTERM');
            bot.stop('SIGTERM');
            process.exit(0);
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startApp().catch((err) => {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err);
    process.exit(1);
});

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞
 * @param {string} filePath - –ø—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
 * @returns {Promise<string>} —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
 */
async function parseDocxToText(filePath) {
    try {
        console.log(`–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
        const result = await mammoth.extractRawText({ path: filePath });
        console.log(`–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω (–¥–ª–∏–Ω–∞: ${result.value.length})`);
        return result.value.trim();
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        return "";
    }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DOCX –≤ HTML
 * @param {string} filePath - –ø—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
 * @returns {Promise<string>} HTML —Ä–∞–∑–º–µ—Ç–∫–∞
 */
async function parseDocxToHtml(filePath) {
    try {
        const result = await mammoth.convertToHtml({ path: filePath });
        return result.value.trim();
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        return "<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.</p>";
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö DOCX —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 * @returns {Promise<string[]>} –º–∞—Å—Å–∏–≤ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
 */
async function getFilesFromRoot() {
    try {
        const files = await yadisk.syncMaterials();
        console.log(`üìö –î–æ—Å—Ç—É–ø–Ω–æ ${files.length} .docx —Ñ–∞–π–ª–æ–≤`);
        return files;
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:", err);
        return [];
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
let gpt4allModel = null;

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
const activeTests = new Map();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∞
let activeTestCacheProcess = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å GPT4All
 * @returns {Promise<Object|null>} –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ —Å –º–µ—Ç–æ–¥–æ–º generate –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function initGPT4AllModel() {
    try {
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT4All –º–æ–¥–µ–ª–∏...");
        const model = await gpt4all.loadModel(modelName);

        return {
            generate: async (prompt, ctx = null) => {
                try {
                    const answer = await model.generate(prompt);
                    return answer.text;
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
                    return null;
                }
            }
        };
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPT4All:", error);
        return null;
    }
}

/**
 * –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
 * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns {string} –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function trimText(text) {
    // –ü—Ä–∏–º–µ—Ä–Ω–æ 1500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
    const MAX_LENGTH = 1500;
    if (text.length <= MAX_LENGTH) return text;

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    const firstPart = text.substring(0, MAX_LENGTH);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–±—Ä–µ–∑–∞–Ω–∏—è
    const lastDot = firstPart.lastIndexOf('.');
    return lastDot > 0 ? firstPart.substring(0, lastDot + 1) : firstPart;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è AI
 * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @param {Object} ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 * @returns {Promise<string>} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
 */
async function generateAIQuestions(text, ctx) {
    try {
        console.log("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤...");

        if (!gpt4allModel) {
            console.log("–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...");
            gpt4allModel = await initGPT4AllModel();
        }

        if (!gpt4allModel) {
            console.log("–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å");
            throw new Error("–ú–æ–¥–µ–ª—å GPT4All –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
        }

        // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const trimmedText = trimText(text);
        console.log(`–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${text.length}, –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π: ${trimmedText.length}`);

        console.log("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...");
        const prompt = `–°–æ–∑–¥–∞–π 1 –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É. 
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–π:
        –í–û–ü–†–û–°: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]
        –ê) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
        –ë) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
        –í) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
        –ì) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
        –ü–†–ê–í–ò–õ–¨–ù–´–ô: [–±—É–∫–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞]

        –¢–µ–∫—Å—Ç: ${trimmedText}`;

        console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏...");
        const result = await gpt4allModel.generate(prompt, ctx);
        console.log("–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω");
        return result;
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ AI:", err);
        throw err;
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
 * @param {string} response - –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
 * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º, –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
 */
function parseTestResponse(response) {
    const lines = response.split('\n');
    const question = lines[0].replace('–í–û–ü–†–û–°:', '').trim();
    const answers = {
        '–ê': lines[1].replace('–ê)', '').trim(),
        '–ë': lines[2].replace('–ë)', '').trim(),
        '–í': lines[3].replace('–í)', '').trim(),
        '–ì': lines[4].replace('–ì)', '').trim()
    };
    const correct = lines[5].replace('–ü–†–ê–í–ò–õ–¨–ù–´–ô:', '').trim();

    return { question, answers, correct };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–µ–Ω—é
const MENU_MATERIALS = 'üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã';
const MENU_TESTS = 'üìù –¢–µ—Å—Ç—ã';
const MENU_CACHE = 'üìä –ö—ç—à';
const MENU_SETTINGS = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏';
const MENU_BACK = 'üîô –ù–∞–∑–∞–¥';

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ–Ω—é
const mainMenuKeyboard = Markup.keyboard([
    [MENU_MATERIALS, MENU_TESTS],
    [MENU_CACHE, MENU_SETTINGS]
]).resize();

const backKeyboard = Markup.keyboard([
    [MENU_BACK]
]).resize();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
    return ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', mainMenuKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.hears(MENU_BACK, async (ctx) => {
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', mainMenuKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
bot.hears(MENU_MATERIALS, async (ctx) => {
    const files = await getFilesFromRoot();
    if (files.length === 0) {
        return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.', mainMenuKeyboard);
    }

    let message = 'üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n';
    files.forEach((file, i) => {
        message += `${i + 1}. ${file}\n`;
    });
    message += '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞';

    return ctx.reply(message, backKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ "–¢–µ—Å—Ç—ã"
bot.hears(MENU_TESTS, async (ctx) => {
    const files = await getFilesFromRoot();
    if (files.length === 0) {
        return ctx.reply('–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.', mainMenuKeyboard);
    }

    let message = 'üìù –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞:\n\n';
    files.forEach((file, i) => {
        message += `${i + 1}. ${file}\n`;
    });
    message += '\n0. üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:';

    return ctx.reply(message, backKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ "–ö—ç—à"
bot.hears(MENU_CACHE, async (ctx) => {
    let message = 'üìä –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫—ç—à–µ–º:\n\n';
    message += '1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—ç—à\n';
    message += '2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É\n';
    message += '3. –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à\n\n';
    message += '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏:';

    return ctx.reply(message, backKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
bot.hears(MENU_SETTINGS, async (ctx) => {
    let message = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n';
    message += '1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫\n';
    message += '2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã\n';
    message += '3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å AI\n\n';
    message += '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:';

    return ctx.reply(message, backKeyboard);
});

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:
bot.command('sync', async (ctx) => {
    try {
        await ctx.reply('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º...');
        const files = await yadisk.syncMaterials();
        await ctx.reply(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
bot.command('check_disk', async (ctx) => {
    try {
        await ctx.reply('üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É...');
        await yadisk.checkAccess();
        await ctx.reply('‚úÖ –î–æ—Å—Ç—É–ø –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞:', error);
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: ${error.message}`);
    }
});
