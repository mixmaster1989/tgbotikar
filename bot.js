const { OpenAI } = require('openai'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º OpenAI
const { Telegraf, Markup, session } = require('telegraf');
const express = require('express');
const path = require('path');
const fs = require('fs-extra');
const mammoth = require('mammoth');
require('dotenv').config();

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
const materialsPath = path.join(__dirname, 'materials');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
const fileMap = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI API
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY, // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express-—Å–µ—Ä–≤–µ—Ä–∞
const app = express();
const PORT = process.env.PORT || 3000;

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use('/static', express.static(path.join(__dirname, 'static')));

// URL Web App (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π IP)
const webAppUrl = `http://89.169.131.216:${PORT}`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ .docx –≤ —Ç–µ–∫—Å—Ç
async function parseDocxToText(filePath) {
    try {
        console.log(`–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: ${filePath}`);
        const result = await mammoth.extractRawText({ path: filePath });
        console.log(`–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${filePath}`);
        return result.value.trim();
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        return '';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI API
async function generateTest(material) {
    try {
        const prompt = `–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:\n\n${material}\n\n–¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º.`;
        const response = await openai.chat.completions.create({
            model: 'gpt-4', // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'gpt-3.5-turbo', –µ—Å–ª–∏ GPT-4 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            messages: [
                { role: 'system', content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã.' },
                { role: 'user', content: prompt },
            ],
            max_tokens: 500,
            temperature: 0.7,
        });
        return response.choices[0].message.content.trim();
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:', err);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async function getMaterialsStructure() {
    const structure = {};
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...');
        const items = await fs.readdir(materialsPath);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏ materials
        const rootFiles = items.filter(item => item.endsWith('.docx'));
        if (rootFiles.length > 0) {
            structure['–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'] = rootFiles;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for (const item of items) {
            const itemPath = path.join(materialsPath, item);
            const isDirectory = await fs.stat(itemPath).then(stat => stat.isDirectory());

            if (isDirectory) {
                const files = await fs.readdir(itemPath);
                structure[item] = files.filter(file => file.endsWith('.docx'));
            }
        }
        console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', structure); // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', err);
    }
    return structure;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async function getMaterialsContent() {
    try {
        const items = await fs.readdir(materialsPath);
        const materials = [];

        for (const item of items) {
            const filePath = path.join(materialsPath, item);
            if (item.endsWith('.docx') && (await fs.stat(filePath)).isFile()) {
                const content = await parseDocxToText(filePath);
                materials.push(content);
            }
        }

        return materials.join('\n\n'); // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', err);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.');
    }
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
app.get('/article/:category?/:fileName', async (req, res) => {
    const { category, fileName } = req.params;

    console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç—å—é: category=${category}, fileName=${fileName}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const filePath = path.join(
        materialsPath,
        category || '', // –ï—Å–ª–∏ category –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–µ–Ω—å
        fileName
    );

    if (!fs.existsSync(filePath)) {
        console.error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        return res.status(404).send('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    try {
        const htmlContent = await parseDocxToText(filePath);
        res.send(`
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>${fileName}</title>
                <link rel="stylesheet" href="/static/styles.css">
            </head>
            <body>
                <div class="container">
                    <div class="article">
                        ${htmlContent}
                    </div>
                    <button class="close-btn" onclick="Telegram.WebApp.close()">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
                <script src="https://telegram.org/js/telegram-web-app.js"></script>
            </body>
            </html>
        `);
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
bot.start(async (ctx) => {
    console.log('–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞');
    await ctx.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.',
        Markup.inlineKeyboard([
            Markup.button.callback('üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'open_materials')
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
bot.action('generate_test', async (ctx) => {
    try {
        await ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        const materialsContent = await getMaterialsContent();

        if (!materialsContent) {
            return ctx.reply('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç—å.');
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ OpenAI API
        const test = await generateTest(materialsContent);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.reply(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç:\n\n${test}`);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
bot.action('open_materials', async (ctx) => {
    console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ "open_materials" –≤—ã–∑–≤–∞–Ω');
    const structure = await getMaterialsStructure();
    const buttons = Object.keys(structure).map(category => [
        Markup.button.callback(category, `category:${category}`)
    ]);

    if (buttons.length === 0) {
        console.log('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.');
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action(/^category:(.+)$/, async (ctx) => {
    const category = ctx.match[1];
    console.log(`–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–∑–≤–∞–Ω: ${category}`);
    const structure = await getMaterialsStructure();
    const materials = structure[category];

    if (!materials || materials.length === 0) {
        console.log(`–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);
        return ctx.reply('–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.');
    }

    const buttons = materials.map(material => [
        Markup.button.callback(material, `material:${category}:${material}`)
    ]);

    buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'open_materials')]);

    await ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:`, Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
bot.action(/^material:(.+):(.+)$/, async (ctx) => {
    const [category, fileName] = ctx.match.slice(1);
    console.log(`–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤—ã–∑–≤–∞–Ω: category=${category}, fileName=${fileName}`);

    const filePath = path.join(materialsPath, category, fileName);

    if (!fs.existsSync(filePath)) {
        console.error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        return ctx.reply('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    const url = `${webAppUrl}/article/${encodeURIComponent(category)}/${encodeURIComponent(fileName)}`;
    console.log(`–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª: ${url}`);

    await ctx.reply(
        `–û—Ç–∫—Ä–æ–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª "${fileName}" —á–µ—Ä–µ–∑ Web App:`,
        Markup.inlineKeyboard([
            Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª', url),
            Markup.button.callback('üîô –ù–∞–∑–∞–¥', `category:${category}`)
        ])
    );
});

// –ó–∞–ø—É—Å–∫ Express-—Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`Web App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${webAppUrl}`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'));
