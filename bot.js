// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
const { Telegraf, Markup } = require("telegraf"); // Telegraf –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
const express = require("express"); // Express –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const path = require("path"); // –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏
const fs = require("fs-extra"); // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
const mammoth = require("mammoth"); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX —Ñ–∞–π–ª–æ–≤
const gpt4all = require("gpt4all"); // –õ–æ–∫–∞–ª—å–Ω–∞—è AI –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
require("dotenv").config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const os = require("os"); // –†–∞–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—É—Ç—è–º–∏

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all"); // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å AI –º–æ–¥–µ–ª—å—é
const finalModelPath = path.join(modelDir, modelName); // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏. –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω.
const materialsPath = path.join(__dirname, "materials"); // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
const PORT = process.env.PORT || 3000; // –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const webAppUrl = `http://89.169.131.216:${PORT}`; // URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const bot = new Telegraf(process.env.BOT_TOKEN, {
    handlerTimeout: 300000 // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–∏–Ω—É—Ç
}); // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const app = express(); // –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app.use("/static", express.static(path.join(__dirname, "static")));

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞
 * @param {string} filePath - –ø—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
 * @returns {Promise<string>} —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
 */
async function parseDocxToText(filePath) {
    try {
        const result = await mammoth.extractRawText({ path: filePath });
        return result.value.trim();
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        return "";
    }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DOCX –≤ HTML
 * @param {string} filePath - –ø—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
 * @returns {Promise<string>} HTML —Ä–∞–∑–º–µ—Ç–∫–∞
 */
async function parseDocxToHtml(filePath) {
    try {
        const result = await mammoth.convertToHtml({ path: filePath });
        return result.value.trim();
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        return "<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.</p>";
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö DOCX —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 * @returns {Promise<string[]>} –º–∞—Å—Å–∏–≤ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
 */
async function getFilesFromRoot() {
    try {
        const items = await fs.readdir(materialsPath);
        return items.filter((item) => item.endsWith(".docx"));
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:", err);
        return [];
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
let gpt4allModel = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å GPT4All
 * @returns {Promise<Object|null>} –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ —Å –º–µ—Ç–æ–¥–æ–º generate –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function initGPT4AllModel() {
    try {
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT4All –º–æ–¥–µ–ª–∏...");
        // –≤ loadModel –Ω–∞–¥–æ –ø–∏—Ö–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞ –Ω–µ –ø—É—Ç—å, –ø—É—Ç–∏ –æ–Ω —Å–∞–º —Å—Ç—Ä–æ–∏—Ç
        const model = await gpt4all.loadModel(modelName);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–µ—Ä—Ç–∫—É —Å –º–µ—Ç–æ–¥–æ–º generate –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return {
            generate: async (prompt) => {
                try {
                    const answer = await model.generate(prompt);
                    return answer.text;
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
                    return null;
                }
            },
        };
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPT4All:", error);
        return null;
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è AI
 * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns {Promise<string>} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
 */
async function generateAIQuestions(text) {
    try {
        console.log("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤...");

        if (!gpt4allModel) {
            console.log("–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...");
            gpt4allModel = await initGPT4AllModel();
        }

        if (!gpt4allModel) {
            console.log("–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å");
            throw new Error("–ú–æ–¥–µ–ª—å GPT4All –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
        }

        console.log("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...");
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
        const prompt = `–°–æ–∑–¥–∞–π 1 –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: ${text}`;

        console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏...");
        const result = await gpt4allModel.generate(prompt);
        console.log("–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω");
        return result;
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ AI:", err);
        throw err;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

// –ö–æ–º–∞–Ω–¥–∞ /start - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.start(async (ctx) => {
    await ctx.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
        Markup.inlineKeyboard([
            Markup.button.callback("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "open_materials"),
            Markup.button.callback("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç", "generate_test"),
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
bot.action("open_materials", async (ctx) => {
    const files = await getFilesFromRoot();

    if (files.length === 0) {
        return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.");
    }

    const buttons = files.map((file) => [
        Markup.button.callback(file, `material:${file}`),
    ]);

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–ø—Ä–æ—Å–º–æ—Ç—Ä
bot.action(/^material:(.+)$/, async (ctx) => {
    const fileName = ctx.match[1];
    const filePath = path.join(materialsPath, fileName);

    if (!fs.existsSync(filePath)) {
        return ctx.reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    const url = `${webAppUrl}/article/${encodeURIComponent(fileName)}`;

    await ctx.reply(
        `–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª "${fileName}" —á–µ—Ä–µ–∑ Web App:`,
        Markup.inlineKeyboard([
            Markup.button.url("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", url),
            Markup.button.callback("üîô –ù–∞–∑–∞–¥", "open_materials"),
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç"
bot.action("generate_test", async (ctx) => {
    try {
        const files = await getFilesFromRoot();
        if (files.length === 0) {
            return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.");
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        const buttons = files.map((file) => [
            Markup.button.callback(`üìÑ ${file}`, `test:${file}`),
        ]);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        buttons.push([Markup.button.callback("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", "test:random")]);

        await ctx.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:",
            Markup.inlineKeyboard(buttons)
        );
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–ø–∏—Å–∫–∞:", err);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
bot.action(/^test:(.+)$/, async (ctx) => {
    console.log("–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞");
    const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error("Operation Timeout")), 300000);
    });

    try {
        const files = await getFilesFromRoot();
        let selectedFile;

        if (ctx.match[1] === 'random') {
            console.log("–í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª...");
            selectedFile = files[Math.floor(Math.random() * files.length)];
        } else {
            selectedFile = ctx.match[1];
        }

        console.log(`–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${selectedFile}`);
        await ctx.reply(
            `üìù –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É "${selectedFile}"\n\n` +
            `‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 3-5 –º–∏–Ω—É—Ç\n` +
            `‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤`
        );

        await Promise.race([
            (async () => {
                const filePath = path.join(materialsPath, selectedFile);
                console.log("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞...");
                await ctx.reply("üîÑ –≠—Ç–∞–ø 1/3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞...");

                const result = await parseDocxToText(filePath);
                if (!result) {
                    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞.");
                }

                console.log("–ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤...");
                await ctx.reply(
                    "‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n" +
                    "ü§ñ –≠—Ç–∞–ø 2/3: –ó–∞–ø—É—Å–∫ AI –º–æ–¥–µ–ª–∏"
                );

                const test = await generateAIQuestions(result);
                console.log("–í–æ–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...");
                await ctx.reply("‚úÖ AI –º–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É\nüéØ –≠—Ç–∞–ø 3/3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞");

                await ctx.reply(
                    `üéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
                    `üìö –ú–∞—Ç–µ—Ä–∏–∞–ª: "${selectedFile}"\n\n` +
                    `${test}`
                );
            })(),
            timeoutPromise,
        ]);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:", err);
        await ctx.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞\n" +
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        );
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
bot
    .launch() // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    .then(() => console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"))
    .catch((err) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err));

app.listen(PORT, () => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    console.log(`Express-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
