require("dotenv").config();
const { Telegraf, session, Scenes } = require("telegraf");
const { Database } = require("sqlite3").verbose();
const fetch = require("node-fetch"); // –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å Telegram API
const { saveFile, getFile } = require("./fsconf"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å fsconf
const fs = require("fs"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å fs

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
const db = new Database("database.sqlite");
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS materials (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    content TEXT
  )`);
});

db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS sections (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT
  )`);
});

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
const bot = new Telegraf(process.env.BOT_TOKEN);

// Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainMenuInlineKeyboard = {
  inline_keyboard: [
    [{ text: "üß† –¢–µ—Å—Ç—ã", callback_data: "tests" }],
    [{ text: "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data: "materials" }],
    [{ text: "üèÜ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data: "results" }],
  ],
};

const materialsMenuInlineKeyboard = {
  inline_keyboard: [
    [{ text: "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data: "add_material" }],
    [{ text: "–ù–∞–∑–∞–¥", callback_data: "back_to_main" }],
  ],
};

const mainMenuKeyboard = {
  reply_markup: {
    keyboard: [
      [{ text: "üß† –¢–µ—Å—Ç—ã" }, { text: "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã" }, { text: "üèÜ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" }],
      [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã" }], // –í–†–ï–ú–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  },
};

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start(async (ctx) => {
  await ctx.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –ø–æ—Ä—Ç–∞–ª–µ –ò–ö–ê–†!", mainMenuKeyboard);
});

bot.hears("üß† –¢–µ—Å—Ç—ã", (ctx) => {
  ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª ¬´–¢–µ—Å—Ç—ã¬ª.");
});

bot.hears("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", async (ctx) => {
  ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: materialsMenuInlineKeyboard,
  });
  await sendMaterialsList(ctx); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
});

bot.hears("üèÜ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", (ctx) => {
  ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª.");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
bot.action("tests", (ctx) => {
  ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª ¬´–¢–µ—Å—Ç—ã¬ª.");
});

bot.action("materials", async (ctx) => {
  ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: materialsMenuInlineKeyboard,
  });
  await sendMaterialsList(ctx);
});

bot.action("results", (ctx) => {
  ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª.");
});

// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ

bot.action("back_to_main", (ctx) => {
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", {
    reply_markup: mainMenuInlineKeyboard,
  });
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
// –°–æ–∑–¥–∞—ë–º —Å—Ü–µ–Ω—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
const addMaterialScene = new Scenes.BaseScene("ADD_MATERIAL");

addMaterialScene.enter(async (ctx) => {
  ctx.session.material = {}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  await ctx.reply("–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ —Å—Ç–∞—Ç—å—è?", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–†–∞–∑–¥–µ–ª", callback_data: "section" }],
        [{ text: "–°—Ç–∞—Ç—å—è", callback_data: "article" }],
      ],
    },
  });
});

bot.action("section", async (ctx) => {
  console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 'section' –≤—ã–∑–≤–∞–Ω."); // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
  if (!ctx.session) ctx.session = {}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ctx.session, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  if (!ctx.session.material) ctx.session.material = {}; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
  ctx.session.material.type = "section";
  console.log("–°–µ—Å—Å–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ type:", ctx.session.material); // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:");
});

bot.action("article", async (ctx) => {
  if (!ctx.session.material) ctx.session.material = {}; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
  ctx.session.material.type = "article";
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:");
});

addMaterialScene.on("text", async (ctx) => {
  if (!ctx.session) ctx.session = {}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  if (!ctx.session.material) ctx.session.material = {}; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç material, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

  console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", ctx.message.text); // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  console.log("–°–µ—Å—Å–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π:", ctx.session.material); // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç ctx.session.material

  if (ctx.session.material.type === "section" && !ctx.session.material.name) {
    ctx.session.material.name = ctx.message.text;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.run(
      "INSERT INTO sections (name) VALUES (?)",
      [ctx.session.material.name],
      (err) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞:", err); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞.");
        } else {
          console.log("–†–∞–∑–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:", ctx.session.material.name); // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
          ctx.reply(`–†–∞–∑–¥–µ–ª "${ctx.session.material.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
          ctx.scene.leave(); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
        }
      }
    );
  } else {
    console.log("–£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –°–æ—Å—Ç–æ—è–Ω–∏–µ ctx.session.material:", ctx.session.material); // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
  }
});

bot.action(/section_(\d+)/, (ctx) => {
  ctx.session.material.section_id = ctx.match[1];
  ctx.reply("–†–∞–∑–¥–µ–ª –≤—ã–±—Ä–∞–Ω. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏.");
});

addMaterialScene.on("photo", async (ctx) => {
  const photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;
  ctx.session.material.photo = photo;

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API
    const fileLink = await ctx.telegram.getFileLink(photo);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    const response = await fetch(fileLink.href);
    const buffer = await response.buffer();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    const fileName = `${photo}.jpg`; // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    await saveFile(buffer, fileName);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.run(
      "INSERT INTO materials (title, content, photo, section_id) VALUES (?, ?, ?, ?)",
      [
        ctx.session.material.title,
        ctx.session.material.content,
        fileName, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ file_id
        ctx.session.material.section_id,
      ],
      (err) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", err);
          ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.");
        } else {
          ctx.reply("–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
        }
      }
    );

    // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    await sendMaterialsList(ctx);
    await ctx.scene.leave(); // –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
bot.action(/open_material_(\d+)/, async (ctx) => {
  const materialId = ctx.match[1];
  db.get("SELECT * FROM materials WHERE id = ?", [materialId], async (err, row) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", err);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.");
    } else {
      const filePath = `fs-files/photo/${row.photo}`;
      if (fs.existsSync(filePath)) {
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        const caption = `${row.title}\n\n${row.content}`;
        const parts = splitText(caption, 1024); // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é —Ç–µ–∫—Å—Ç–∞
        await ctx.replyWithPhoto({ source: filePath }, { caption: parts[0] });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        for (let i = 1; i < parts.length; i++) {
          await ctx.reply(parts[i]);
        }
      } else {
        await ctx.reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      }
    }
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
function splitText(text, maxLength) {
  const parts = [];
  while (text.length > maxLength) {
    let part = text.slice(0, maxLength);
    const lastSpace = part.lastIndexOf(" ");
    if (lastSpace > -1) {
      part = part.slice(0, lastSpace); // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É
    }
    parts.push(part);
    text = text.slice(part.length).trim();
  }
  parts.push(text); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
  return parts;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
bot.action("back_to_materials", async (ctx) => {
  await sendMaterialsList(ctx);
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
async function sendMaterialsList(ctx) {
  db.all("SELECT * FROM sections", (err, sections) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:", err);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤.");
    } else {
      const keyboard = sections.map((section) => [
        { text: section.name, callback_data: `open_section_${section.id}` },
      ]);
      ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", {
        reply_markup: { inline_keyboard: keyboard },
      });
    }
  });
}

bot.action(/open_section_(\d+)/, (ctx) => {
  const sectionId = ctx.match[1];
  db.all(
    "SELECT * FROM materials WHERE section_id = ?",
    [sectionId],
    (err, rows) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", err);
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
      } else {
        const keyboard = rows.map((row) => [
          { text: row.title, callback_data: `open_material_${row.id}` },
        ]);
        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", {
          reply_markup: { inline_keyboard: keyboard },
        });
      }
    }
  );
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
async function getSections() {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM sections", (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
}

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ü–µ–Ω—É –∫ Stage
const stage = new Scenes.Stage([addMaterialScene]);

bot.use(session());
bot.use(stage.middleware());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
bot.action("add_material", async (ctx) => {
  await ctx.scene.enter("ADD_MATERIAL");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
bot.hears("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", async (ctx) => {
  try {
    db.run("DELETE FROM materials", (err) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", err);
        ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
      } else {
        ctx.reply("–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!");
      }
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
  }
});



// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

// API –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ –¥–∞—à–±–æ—Ä–¥–∞
const express = require("express");
const app = express();

app.get("/tests", (req, res) => {
  res.send("–õ–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞");
});

app.get("/results", (req, res) => {
  res.send("–õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤");
});

app.listen(3000, () => console.log("API server started on port 3000"));
