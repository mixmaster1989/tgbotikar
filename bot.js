// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const path = require("path");
const fs = require("fs-extra");
const mammoth = require("mammoth");
const gpt4all = require("gpt4all");
require("dotenv").config();
const os = require("os");
const sqlite3 = require("sqlite3").verbose();
const { spawn } = require('child_process');
const YaDiskService = require('./services/yadisk_service');
const yadisk = new YaDiskService(process.env.YANDEX_DISK_TOKEN);

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all");
const finalModelPath = path.join(modelDir, modelName);
const materialsPath = path.join(__dirname, "materials");
const cachePath = path.join(__dirname, "cache");
const PORT = process.env.PORT || 3000;
const webAppUrl = `http://89.232.176.215:${PORT}`;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const bot = new Telegraf(process.env.BOT_TOKEN, { handlerTimeout: 300000 });
const app = express();
fs.ensureDirSync(cachePath);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database("database.sqlite", (err) => {
  if (err) {
    console.error("DB Error:", err.message);
    process.exit(1);
  } else {
    try {
      initDatabase();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error.message);
    }
  }
});

function initDatabase() {
  db.run(
    `CREATE TABLE IF NOT EXISTS gpt_cache (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      prompt TEXT UNIQUE,
      response TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )`,
    (err) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", err);
      } else {
        console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ gpt_cache –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
      }
    }
  );
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let gpt4allModel = null;
let activeTestCacheProcess = null;
const activeTests = new Map();
let lastUpdateTime = 0;
const UPDATE_INTERVAL = 1000;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function parseDocxToText(filePath) {
  try {
    const result = await mammoth.extractRawText({ path: filePath });
    return result.value.trim();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.");
  }
}

async function parseDocxToHtml(filePath) {
  try {
    const result = await mammoth.convertToHtml({ path: filePath });
    return result.value.trim();
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
    return "<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.</p>";
  }
}

async function getFilesFromRoot() {
  try {
    const files = await yadisk.syncMaterials();
    return files;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:", err);
    return [];
  }
}

async function initGPT4AllModel() {
  const model = await gpt4all.loadModel(modelName);
  return {
    generate: async (prompt) => {
      const options = {
        maxTokens: 192,
        temp: 0.65,
        topK: 30,
        topP: 0.35,
        repeatPenalty: 1.2,
        batchSize: 1,
      };
      return (await model.generate(prompt, options)).text;
    },
  };
}

function trimText(text, maxLength = 2000) {
  return text.length > maxLength ? text.slice(0, maxLength) : text;
}

async function generateAIQuestions(text, ctx) {
  try {
    if (!gpt4allModel) {
      gpt4allModel = await initGPT4AllModel();
    }
    if (!gpt4allModel) {
      throw new Error("–ú–æ–¥–µ–ª—å GPT4All –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
    }
    const trimmedText = trimText(text);
    const prompt = `–°–æ–∑–¥–∞–π 1 –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É. 
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–π:
–í–û–ü–†–û–°: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]
–ê) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
–ë) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
–í) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
–ì) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
–ü–†–ê–í–ò–õ–¨–ù–´–ô: [–±—É–∫–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞]

–¢–µ–∫—Å—Ç: ${trimmedText}`;
    const result = await gpt4allModel.generate(prompt, ctx);
    return result;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ AI:", err);
    throw err;
  }
}

function parseTestResponse(response) {
  const lines = response.split("\n");
  return {
    question: lines[0]?.replace("–í–û–ü–†–û–°:", "").trim(),
    answers: {
      –ê: lines[1]?.slice(3).trim(),
      –ë: lines[2]?.slice(3).trim(),
      –í: lines[3]?.slice(3).trim(),
      –ì: lines[4]?.slice(3).trim(),
    },
    correct: lines[5]?.replace("–ü–†–ê–í–ò–õ–¨–ù–´–ô:", "").trim(),
  };
}

function saveToCache(question, response) {
  const stmt = db.prepare("INSERT OR REPLACE INTO gpt_cache (prompt, response) VALUES (?, ?)");
  stmt.run(question, response);
  stmt.finalize();
}

function logAndNotify(message, ctx = null) {
  const logMessage = `[${new Date().toISOString()}] ${message}`;
  console.log(logMessage);
  if (ctx) ctx.reply(message);
}

// --- –ú–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã ---
const mainMenuKeyboard = Markup.keyboard([
  ['üìö –ö—ç—à', 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è'],
  ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
]).resize().oneTime(false);

bot.command('start', (ctx) => {
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenuKeyboard);
});

bot.hears('üìö –ö—ç—à', (ctx) => {
  ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º', {
    reply_markup: {
      keyboard: [
        ['üìã –°–ø–∏—Å–æ–∫ –∫—ç—à–∞', 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à'],
        ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
});

bot.hears('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', (ctx) => {
  ctx.reply('–†–µ–∂–∏–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', {
    reply_markup: {
      keyboard: [
        ['‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç-–∫—ç—à', '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç-–∫—ç—à'],
        ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
});

bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => {
  ctx.reply('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞', {
    reply_markup: {
      keyboard: [
        ['üìà –ö—ç—à', 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è'],
        ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
});

bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', (ctx) => {
  ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', {
    reply_markup: {
      keyboard: [
        ['üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã', 'üìù –õ–æ–≥–∏'],
        ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
});

bot.hears('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (ctx) => {
  ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard);
});

// --- –î–µ–π—Å—Ç–≤–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
bot.action("generate_cache", async (ctx) => {
  await ctx.answerCbQuery("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...");
  logAndNotify("üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—ç—à–∞ –∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", ctx);

  setTimeout(async () => {
    try {
      const files = await yadisk.syncMaterials();
      if (!files.length) {
        logAndNotify("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫—ç—à–∞.", ctx);
        return;
      }
      // ...–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞...
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞:', err);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞');
    }
  }, 1000);
});

bot.action("run_test_cache", async (ctx) => {
  try {
    const statusMessage = await ctx.reply(
      "üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∞...\n\n",
      Markup.inlineKeyboard([[
        Markup.button.callback("‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", "stop_test_cache")
      ]])
    );

    let output = "";
    let pendingUpdate = false;

    activeTestCacheProcess = spawn('node', ['test_cache.js'], {
      cwd: __dirname
    });

    activeTestCacheProcess.stdout.on('data', async (data) => {
      const message = data.toString().trim();
      output += message + '\n';
      const now = Date.now();

      const updatePrefixes = [
        'FILE:', 'PROMPT:', 'CACHE_CHECK:', 'CACHE_HIT:',
        'MODEL_REQUEST:', 'RESPONSE:', 'WAIT:', 'ERROR:',
        'SKIP:', 'CRITICAL_ERROR:', 'PROGRESS:'
      ];

      const shouldUpdate = updatePrefixes.some(prefix => message.startsWith(prefix));

      if (!pendingUpdate && (shouldUpdate || now - lastUpdateTime >= UPDATE_INTERVAL)) {
        pendingUpdate = true;
        lastUpdateTime = now;

        try {
          const truncatedOutput = output.slice(-2000);
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            statusMessage.message_id,
            null,
            `üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∞...\n\n<pre>${truncatedOutput}</pre>`,
            {
              parse_mode: 'HTML',
              reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback("‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", "stop_test_cache")]
              ])
            }
          ).catch(() => { });
        } finally {
          pendingUpdate = false;
        }
      }
    });

    // ...–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞...
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ test_cache.js:", err);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∞.");
  }
});

bot.action("stop_test_cache", async (ctx) => {
  try {
    if (activeTestCacheProcess) {
      activeTestCacheProcess.kill('SIGTERM');
      activeTestCacheProcess = null;

      await ctx.reply("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        Markup.inlineKeyboard([
          [Markup.button.callback("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ", "run_test_cache")],
          [Markup.button.callback("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu")]
        ])
      );
    } else {
      await ctx.reply("‚ùì –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:", err);
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.");
  }
});

// --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
bot.command('sync', async (ctx) => {
  try {
    await ctx.reply('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º...');
    const files = await yadisk.syncMaterials();
    await ctx.reply(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º');
  }
});

bot.command('check_disk', async (ctx) => {
  try {
    await ctx.reply('üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É...');
    await yadisk.checkAccess();
    await ctx.reply('‚úÖ –î–æ—Å—Ç—É–ø –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: ${error.message}`);
  }
});

bot.command('disk_info', async (ctx) => {
  try {
    await ctx.reply('üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ...');
    const diskInfo = await yadisk.getDiskInfo();
    await ctx.reply(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ:\n\n${JSON.stringify(diskInfo, null, 2)}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

// --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
bot.launch().then(() => {
  console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
}).catch((err) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err);
  process.exit(1);
});

process.on("unhandledRejection", (reason, promise) => {
  console.error("Unhandled Rejection at:", promise, "reason:", reason);
});
process.on("uncaughtException", (error) => {
  console.error("Uncaught Exception:", error);
  process.exit(1);
});

// --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏ –æ—á–∏—Å—Ç–∫–∞ ---
function gracefulShutdown(signal) {
  if (typeof activeTestCacheProcess !== 'undefined' && activeTestCacheProcess) {
    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ test_cache.js');
    activeTestCacheProcess.kill('SIGTERM');
  }
  db.close((err) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err);
    } else {
      console.log("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞");
    }
    process.exit(0);
  });
}

process.on("SIGINT", () => gracefulShutdown('SIGINT'));
process.on("SIGTERM", () => gracefulShutdown('SIGTERM'));
