// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
const { Telegraf, Markup } = require("telegraf"); // Telegraf –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
const express = require("express"); // Express –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const path = require("path"); // –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏
const fs = require("fs-extra"); // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
const mammoth = require("mammoth"); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX —Ñ–∞–π–ª–æ–≤
const gpt4all = require("gpt4all"); // –õ–æ–∫–∞–ª—å–Ω–∞—è AI –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
require("dotenv").config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const os = require("os"); // –†–∞–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
const sqlite3 = require("sqlite3").verbose(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º SQLite
const { spawn } = require('child_process'); // –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all"); // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å AI –º–æ–¥–µ–ª—å—é
const finalModelPath = path.join(modelDir, modelName); // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏. –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω.
const materialsPath = path.join(__dirname, "materials"); // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
const PORT = process.env.PORT || 3000; // –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const webAppUrl = `http://89.169.131.216:${PORT}`; // URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const bot = new Telegraf(process.env.BOT_TOKEN, {
    handlerTimeout: 300000 // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–∏–Ω—É—Ç
}); // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const app = express(); // –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app.use("/static", express.static(path.join(__dirname, "static")));

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database("database.sqlite", (err) => {
    if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err);
    } else {
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
        initDatabase();
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
function initDatabase() {
    db.run(
        `CREATE TABLE IF NOT EXISTS gpt_cache (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            prompt TEXT UNIQUE,
            response TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )`,
        (err) => {
            if (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", err);
            } else {
                console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ gpt_cache –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
            }
        }
    );
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
async function startApp() {
    try {
        console.log("üìå –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã");
        console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");

        // 1. –ó–∞–ø—É—Å–∫ Express-—Å–µ—Ä–≤–µ—Ä–∞
        await new Promise((resolve) => {
            app.listen(PORT, () => {
                console.log(`üåê Express-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
                resolve();
            });
        });

        // 2. –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        console.log("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...");
        try {
            await bot.launch();
            console.log("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞:", error);
            process.exit(1);
        }

        // 3. –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞
        console.log("\nüéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!");

        // 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.once('SIGINT', () => {
            console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ SIGINT');
            bot.stop('SIGINT');
            process.exit(0);
        });

        process.once('SIGTERM', () => {
            console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ SIGTERM');
            bot.stop('SIGTERM');
            process.exit(0);
        });

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startApp().catch((err) => {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err);
    process.exit(1);
});

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞
 * @param {string} filePath - –ø—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
 * @returns {Promise<string>} —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
 */
async function parseDocxToText(filePath) {
    try {
        console.log(`–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
        const result = await mammoth.extractRawText({ path: filePath });
        console.log(`–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω (–¥–ª–∏–Ω–∞: ${result.value.length})`);
        return result.value.trim();
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        return "";
    }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DOCX –≤ HTML
 * @param {string} filePath - –ø—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
 * @returns {Promise<string>} HTML —Ä–∞–∑–º–µ—Ç–∫–∞
 */
async function parseDocxToHtml(filePath) {
    try {
        const result = await mammoth.convertToHtml({ path: filePath });
        return result.value.trim();
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
        return "<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.</p>";
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö DOCX —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 * @returns {Promise<string[]>} –º–∞—Å—Å–∏–≤ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
 */
async function getFilesFromRoot() {
    try {
        console.log('–ß—Ç–µ–Ω–∏–µ –ø–∞–ø–∫–∏ materials...');
        const items = await fs.readdir(materialsPath);
        console.log(`–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${items.length}`);
        const files = items.filter((item) => item.endsWith(".docx"));
        console.log(`–ù–∞–π–¥–µ–Ω–æ .docx —Ñ–∞–π–ª–æ–≤: ${files.length}`);
        console.log(`–§–∞–π–ª—ã: ${files.join(', ')}`);
        return files;
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:", err);
        return [];
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
let gpt4allModel = null;

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
const activeTests = new Map();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∞
let activeTestCacheProcess = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å GPT4All
 * @returns {Promise<Object|null>} –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ —Å –º–µ—Ç–æ–¥–æ–º generate –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function initGPT4AllModel() {
    try {
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT4All –º–æ–¥–µ–ª–∏...");
        const model = await gpt4all.loadModel(modelName);

        return {
            generate: async (prompt, ctx = null) => {
                try {
                    const answer = await model.generate(prompt);
                    return answer.text;
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
                    return null;
                }
            }
        };
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPT4All:", error);
        return null;
    }
}

/**
 * –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
 * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns {string} –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function trimText(text) {
    // –ü—Ä–∏–º–µ—Ä–Ω–æ 1500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
    const MAX_LENGTH = 1500;
    if (text.length <= MAX_LENGTH) return text;

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    const firstPart = text.substring(0, MAX_LENGTH);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–±—Ä–µ–∑–∞–Ω–∏—è
    const lastDot = firstPart.lastIndexOf('.');
    return lastDot > 0 ? firstPart.substring(0, lastDot + 1) : firstPart;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è AI
 * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @param {Object} ctx - –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 * @returns {Promise<string>} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
 */
async function generateAIQuestions(text, ctx) {
    try {
        console.log("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤...");

        if (!gpt4allModel) {
            console.log("–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...");
            gpt4allModel = await initGPT4AllModel();
        }

        if (!gpt4allModel) {
            console.log("–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å");
            throw new Error("–ú–æ–¥–µ–ª—å GPT4All –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
        }

        // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const trimmedText = trimText(text);
        console.log(`–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${text.length}, –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π: ${trimmedText.length}`);

        console.log("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...");
        const prompt = `–°–æ–∑–¥–∞–π 1 –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É. 
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–π:
        –í–û–ü–†–û–°: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]
        –ê) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
        –ë) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
        –í) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
        –ì) [–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞]
        –ü–†–ê–í–ò–õ–¨–ù–´–ô: [–±—É–∫–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞]

        –¢–µ–∫—Å—Ç: ${trimmedText}`;

        console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏...");
        const result = await gpt4allModel.generate(prompt, ctx);
        console.log("–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω");
        return result;
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ AI:", err);
        throw err;
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
 * @param {string} response - –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
 * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º, –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
 */
function parseTestResponse(response) {
    const lines = response.split('\n');
    const question = lines[0].replace('–í–û–ü–†–û–°:', '').trim();
    const answers = {
        '–ê': lines[1].replace('–ê)', '').trim(),
        '–ë': lines[2].replace('–ë)', '').trim(),
        '–í': lines[3].replace('–í)', '').trim(),
        '–ì': lines[4].replace('–ì)', '').trim()
    };
    const correct = lines[5].replace('–ü–†–ê–í–ò–õ–¨–ù–´–ô:', '').trim();

    return { question, answers, correct };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ start –º–µ–Ω—é
bot.start(async (ctx) => {
    const buttonRows = [
        [Markup.button.callback("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "open_materials")],
        [Markup.button.callback("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç", "generate_test")],
        [
            Markup.button.callback("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à", "check_cache"),
            Markup.button.callback("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞", "view_dataset")
        ]
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    if (activeTestCacheProcess) {
        buttonRows.push([
            Markup.button.callback("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", "run_test_cache"),
            Markup.button.callback("‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", "stop_test_cache")
        ]);
    } else {
        buttonRows.push([
            Markup.button.callback("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", "run_test_cache")
        ]);
    }

    await ctx.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
        Markup.inlineKeyboard(buttonRows)
    );
});

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à"
bot.action("check_cache", async (ctx) => {
    try {
        db.all(`
            SELECT 
                prompt, 
                response, 
                created_at,
                (SELECT COUNT(*) FROM gpt_cache) as total_entries
            FROM gpt_cache 
            ORDER BY created_at DESC 
            LIMIT 5
        `, async (err, rows) => {
            if (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—ç—à–∞:", err);
                return ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—ç—à–∞.");
            }

            if (rows.length === 0) {
                return ctx.reply("üìÇ –ö—ç—à –ø—É—Å—Ç.");
            }

            let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞</b>\n`;
            message += `\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${rows[0].total_entries}\n`;
            message += `\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n\n`;

            rows.forEach((row, index) => {
                const date = new Date(row.created_at).toLocaleString('ru-RU');
                message += `${index + 1}. <b>–î–∞—Ç–∞:</b> ${date}\n`;
                message += `üìù <b>–í–æ–ø—Ä–æ—Å:</b>\n${row.prompt.slice(0, 100)}${row.prompt.length > 100 ? '...' : ''}\n`;
                message += `üí° <b>–û—Ç–≤–µ—Ç:</b>\n${row.response.slice(0, 100)}${row.response.length > 100 ? '...' : ''}\n\n`;
            });

            message += `\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cache`;

            await ctx.reply(message, {
                parse_mode: 'HTML',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "check_cache")],
                    [Markup.button.callback("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu")]
                ])
            });
        });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à':", err);
        ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏.");
    }
});

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
bot.action("view_dataset", async (ctx) => {
    try {
        const datasetDir = path.join(__dirname, "dataset");

        if (!fs.existsSync(datasetDir)) {
            return ctx.reply("üìÇ –ü–∞–ø–∫–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        }

        const files = fs.readdirSync(datasetDir)
            .filter(file => file.endsWith('.json'))
            .sort((a, b) => {
                return fs.statSync(path.join(datasetDir, b)).mtime.getTime() -
                    fs.statSync(path.join(datasetDir, a)).mtime.getTime();
            });

        if (files.length === 0) {
            return ctx.reply("üìÇ –î–∞—Ç–∞—Å–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        }

        // –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –¥–∞—Ç–∞—Å–µ—Ç
        const latestDataset = JSON.parse(
            fs.readFileSync(path.join(datasetDir, files[0]), 'utf8')
        );

        let message = `üìö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–∞—Ç–∞—Å–µ—Ç–µ:</b>\n\n`;
        message += `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(latestDataset.created_at).toLocaleString('ru-RU')}\n`;
        message += `üìä –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: ${latestDataset.total_examples}\n`;
        message += `ü§ñ –ú–æ–¥–µ–ª—å: ${latestDataset.model}\n\n`;

        message += `<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:</b>\n`;
        const factualCount = latestDataset.examples.filter(ex => ex.metadata.is_factual).length;
        message += `‚úÖ –§–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö: ${factualCount}\n`;
        message += `üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: ${Math.round(latestDataset.examples.reduce((acc, ex) => acc + ex.metadata.response_length, 0) / latestDataset.total_examples)}\n\n`;

        message += `<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø—Ä–∏–º–µ—Ä–∞:</b>\n\n`;
        latestDataset.examples.slice(0, 3).forEach((example, i) => {
            message += `${i + 1}. <b>–í–æ–ø—Ä–æ—Å:</b>\n${example.instruction.slice(0, 100)}${example.instruction.length > 100 ? '...' : ''}\n`;
            message += `<b>–û—Ç–≤–µ—Ç:</b>\n${example.output.slice(0, 100)}${example.output.length > 100 ? '...' : ''}\n\n`;
        });

        await ctx.reply(message, {
            parse_mode: 'HTML',
            reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "view_dataset")],
                [Markup.button.callback("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu")]
            ])
        });

    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–∞—Ç–∞—Å–µ—Ç–∞:", err);
        ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–∞—Ç–∞—Å–µ—Ç–∞.");
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.action("back_to_menu", async (ctx) => {
    await ctx.editMessageText(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        Markup.inlineKeyboard([
            [Markup.button.callback("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "open_materials")],
            [Markup.button.callback("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç", "generate_test")],
            [
                Markup.button.callback("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à", "check_cache"),
                Markup.button.callback("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞", "view_dataset")
            ],
            [Markup.button.callback("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫—ç—à–∞", "run_test_cache")]
        ])
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /cache - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫—ç—à–∞
bot.command("cache", async (ctx) => {
    try {
        db.all("SELECT prompt, response, created_at FROM gpt_cache", (err, rows) => {
            if (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—ç—à–∞:", err);
                return ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—ç—à–∞.");
            }

            if (rows.length === 0) {
                return ctx.reply("üìÇ –ö—ç—à –ø—É—Å—Ç.");
            }

            let message = "üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞:\n\n";
            rows.forEach((row, index) => {
                message += `${index + 1}. [${row.created_at}]\n`;
                message += `–ü—Ä–æ–º–ø—Ç: ${row.prompt.slice(0, 50)}...\n`;
                message += `–û—Ç–≤–µ—Ç: ${row.response.slice(0, 50)}...\n\n`;
            });

            ctx.reply(message);
        });
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /cache:", err);
        ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.");
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
bot.action("open_materials", async (ctx) => {
    const files = await getFilesFromRoot();

    if (files.length === 0) {
        return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.");
    }

    const buttons = files.map((file) => [
        Markup.button.callback(file, `material:${file}`),
    ]);

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–ø—Ä–æ—Å–º–æ—Ç—Ä
bot.action(/^material:(.+)$/, async (ctx) => {
    const fileName = ctx.match[1];
    const filePath = path.join(materialsPath, fileName);

    if (!fs.existsSync(filePath)) {
        return ctx.reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    const url = `${webAppUrl}/article/${encodeURIComponent(fileName)}`;

    await ctx.reply(
        `–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª "${fileName}" —á–µ—Ä–µ–∑ Web App:`,
        Markup.inlineKeyboard([
            Markup.button.url("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", url),
            Markup.button.callback("üîô –ù–∞–∑–∞–¥", "open_materials"),
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç"
bot.action("generate_test", async (ctx) => {
    try {
        const files = await getFilesFromRoot();
        if (files.length === 0) {
            return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.");
        }

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        const buttons = files.map((file) => [
            Markup.button.callback(`üìÑ ${file}`, `test:${file}`),
        ]);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        buttons.push([Markup.button.callback("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", "test:random")]);

        await ctx.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:",
            Markup.inlineKeyboard(buttons)
        );
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–ø–∏—Å–∫–∞:", err);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
bot.action(/^test:(.+)$/, async (ctx) => {
    console.log("–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞");
    const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error("Operation Timeout")), 300000);
    });

    try {
        const files = await getFilesFromRoot();
        let selectedFile;

        if (ctx.match[1] === 'random') {
            console.log("–í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª...");
            selectedFile = files[Math.floor(Math.random() * files.length)];
        } else {
            selectedFile = ctx.match[1];
        }

        console.log(`–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${selectedFile}`);
        await ctx.reply(
            `üìù –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É "${selectedFile}"\n\n` +
            `‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 3-5 –º–∏–Ω—É—Ç\n` +
            `‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤`
        );

        await Promise.race([
            (async () => {
                const filePath = path.join(materialsPath, selectedFile);
                console.log("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞...");
                await ctx.reply("üîÑ –≠—Ç–∞–ø 1/3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞...");

                const result = await parseDocxToText(filePath);
                if (!result) {
                    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞.");
                }

                console.log("–ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤...");
                await ctx.reply(
                    "‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n" +
                    "ü§ñ –≠—Ç–∞–ø 2/3: –ó–∞–ø—É—Å–∫ AI –º–æ–¥–µ–ª–∏"
                );

                const test = await generateAIQuestions(result, ctx);
                console.log("–í–æ–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...");

                // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
                const parsedTest = parseTestResponse(test);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                const testId = Date.now().toString();
                activeTests.set(testId, parsedTest.correct);

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
                const message = `üéØ <b>–í–æ–ø—Ä–æ—Å:</b>\n\n${parsedTest.question}\n\n` +
                    `<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:</i>`;

                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                const keyboard = [
                    [
                        Markup.button.callback('–ê) ' + parsedTest.answers['–ê'], `answer:${testId}:–ê`),
                        Markup.button.callback('–ë) ' + parsedTest.answers['–ë'], `answer:${testId}:–ë`)
                    ],
                    [
                        Markup.button.callback('–í) ' + parsedTest.answers['–í'], `answer:${testId}:–í`),
                        Markup.button.callback('–ì) ' + parsedTest.answers['–ì'], `answer:${testId}:–ì`)
                    ]
                ];

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                await ctx.reply(message, {
                    parse_mode: 'HTML',
                    ...Markup.inlineKeyboard(keyboard)
                });

            })(),
            timeoutPromise,
        ]);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:", err);
        await ctx.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞\n" +
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        );
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
bot.action(/^answer:(\d+):([–ê–ë–í–ì])$/, async (ctx) => {
    try {
        const testId = ctx.match[1];
        const userAnswer = ctx.match[2];
        const correctAnswer = activeTests.get(testId);

        if (!correctAnswer) {
            await ctx.reply('‚ö†Ô∏è –¢–µ—Å—Ç —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π.');
            return;
        }

        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        activeTests.delete(testId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        const isCorrect = userAnswer === correctAnswer;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await ctx.reply(
            isCorrect
                ? '‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'
                : `‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}`,
            {
                parse_mode: 'HTML',
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('üîÑ –ù–æ–≤—ã–π —Ç–µ—Å—Ç', 'generate_test')]
                ])
            }
        );

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞:', err);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
let lastUpdateTime = 0;
const UPDATE_INTERVAL = 1000; // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (1 —Å–µ–∫—É–Ω–¥–∞)

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ run_test_cache
bot.action("run_test_cache", async (ctx) => {
    try {
        const statusMessage = await ctx.reply(
            "üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∞...\n\n",
            Markup.inlineKeyboard([[
                Markup.button.callback("‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", "stop_test_cache")
            ]])
        );

        let output = "";
        let pendingUpdate = false;

        activeTestCacheProcess = spawn('node', ['test_cache.js'], {
            cwd: __dirname
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞
        activeTestCacheProcess.stdout.on('data', async (data) => {
            output += data.toString();
            const now = Date.now();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (!pendingUpdate && now - lastUpdateTime >= UPDATE_INTERVAL) {
                pendingUpdate = true;
                lastUpdateTime = now;

                try {
                    const truncatedOutput = output.slice(-2000); // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞
                    await ctx.telegram.editMessageText(
                        ctx.chat.id,
                        statusMessage.message_id,
                        null,
                        `üîÑ –ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∞:\n\n${truncatedOutput}`,
                        {
                            parse_mode: 'HTML',
                            reply_markup: Markup.inlineKeyboard([[
                                Markup.button.callback("‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", "stop_test_cache")
                            ]])
                        }
                    ).catch(() => { });
                } finally {
                    pendingUpdate = false;
                }
            }
        });

        // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º...
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ test_cache.js:", err);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∞.");
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ stop_test_cache
bot.action("stop_test_cache", async (ctx) => {
    try {
        if (activeTestCacheProcess) {
            activeTestCacheProcess.kill('SIGTERM');
            activeTestCacheProcess = null;

            await ctx.reply("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                Markup.inlineKeyboard([
                    [Markup.button.callback("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ", "run_test_cache")],
                    [Markup.button.callback("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu")]
                ])
            );
        } else {
            await ctx.reply("‚ùì –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
        }
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:", err);
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.");
    }
});

// –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    if (activeTestCacheProcess) {
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ test_cache.js');
        activeTestCacheProcess.kill('SIGTERM');
    }
    process.exit(0);
});

process.on('SIGTERM', () => {
    if (activeTestCacheProcess) {
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ test_cache.js');
        activeTestCacheProcess.kill('SIGTERM');
    }
    process.exit(0);
});
