const { Telegraf, Markup, session } = require("telegraf");
const express = require("express");
const fs = require("fs-extra");
const path = require("path");
const os = require("os");
const sqlite3 = require("sqlite3").verbose();
const mammoth = require("mammoth");
const gpt4all = require("gpt4all");
const fuzzysort = require('fuzzysort');

function safeRequire(modulePath) {
  try { return require(modulePath); } catch (e) { console.error(`[FATAL] require('${modulePath}')`, e); throw e; }
}

function escapeHTML(str) {
  if (!str) return '';
  return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;").replace(/'/g, "&#39;");
}

// –ú–æ–¥—É–ª–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
const { exportCacheToJsonFile, uploadCacheJsonToYadisk } = safeRequire("./modules/cache_export");
const ui = safeRequire("./modules/ui_messages");
const logger = safeRequire("./modules/logger");
const { recognizeText } = safeRequire("./modules/ocr");
const { convertDocxToPdf } = safeRequire("./modules/docx2pdf");
const { saveToCacheHistory, getAllCacheQuestions, fuzzyFindInCache } = safeRequire("./modules/cache");
const { postprocessLanguageTool, levenshtein } = require('./modules/ocr');
const { loadGarbage, addGarbage, filterGarbage } = require('./modules/ocr_garbage_manager');
const { getTemplates } = require('./modules/ocr/templates');
const { processOcrPipeline } = require('./modules/ocr/pipeline');
const { semanticOcrAssemble, humanReadableAssemble } = require('./modules/ocr/postprocess');
const { mergeOcrResultsNoDuplicates } = require('./modules/ocr/scoring');

require("dotenv").config();
const YaDiskService = require("./services/yadisk_service");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
const YADISK_TOKEN = process.env.YADISK_TOKEN;
if (!YADISK_TOKEN) throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω YADISK_TOKEN –≤ .env");
const yadisk = new YaDiskService(YADISK_TOKEN);

// –ü—É—Ç–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all");
const materialsPath = path.join(__dirname, "materials");
const cachePath = path.join(__dirname, "cache");
const tempPath = path.join(__dirname, "temp");
const gpt4allPath = path.join(modelDir, modelName);
const gpt4allCachePath = path.join(gpt4allPath, "cache");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Express
const bot = new Telegraf(BOT_TOKEN);
bot.use(session());
const app = express();
app.use("/static", express.static(path.join(__dirname, "static")));
fs.ensureDirSync(cachePath);

// SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—ç—à–∞
const db = new sqlite3.Database("database.sqlite", (err) => {
  if (err) {
    logger.error("DB Error: " + err.message);
    process.exit(1);
  } else {
    try { initDatabase(); } catch (error) { logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: " + error.message); }
  }
});
function initDatabase() {
  db.run(`CREATE TABLE IF NOT EXISTS gpt_cache (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    prompt TEXT UNIQUE,
    response TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`);
}

// GPT4All –º–æ–¥–µ–ª—å (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
let gpt4allModel = null;
async function initGPT4AllModel() {
  const model = await gpt4all.loadModel(modelName);
  return {
    generate: async (prompt) => {
      const options = { maxTokens: 32, temp: 1.5, topK: 1, topP: 0.1, repeatPenalty: 1.0, batchSize: 1 };
      return (await model.generate(prompt, options)).text;
    },
  };
}

// –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫—ç—à–∞
const cacheQueue = [];
let isCacheProcessing = false;

// Fuzzy-–ø–æ–∏—Å–∫ –ø–æ –∫—ç—à—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
async function fuzzyFindInYandexDisk(question) {
  try {
    const remotePath = "/bot_cache/dataset.json";
    const localPath = path.join(cachePath, "dataset.json");
    await yadisk.downloadFileByPath(remotePath, localPath);
    if (!fs.existsSync(localPath)) return null;
    const data = JSON.parse(fs.readFileSync(localPath, "utf8"));
    if (!Array.isArray(data)) return null;
    const results = fuzzysort.go(question, data, { key: 'prompt', threshold: -1000 });
    if (results.length > 0 && results[0].score > -1000) return results[0].obj.response;
    return null;
  } catch (err) {
    logger.error(`[YADISK CACHE] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${err.message}`);
    notifyAdmin(`[YADISK CACHE] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${err.message}`);
    return null;
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_ID = process.env.ADMIN_ID;
function notifyAdmin(message) {
  if (ADMIN_ID) bot.telegram.sendMessage(ADMIN_ID, `[ADMIN LOG]\n${message}`);
  logger.info(`[ADMIN NOTIFY] ${message}`);
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É
async function sendProgress(ctx, text) {
  try { await ctx.reply(text); } catch {}
  notifyAdmin(text);
}

// –†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
function splitTextByLength(text, maxLength = 700) {
  const parts = [];
  let i = 0;
  while (i < text.length) {
    parts.push(text.substring(i, i + maxLength));
    i += maxLength;
  }
  return parts;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —Å –æ—á–µ—Ä–µ–¥—å—é –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
async function processCacheQueue() {
  if (isCacheProcessing || cacheQueue.length === 0) return;
  isCacheProcessing = true;
  const { ctx } = cacheQueue.shift();
  try {
    await sendProgress(ctx, ui.processingFile);
    const files = await yadisk.syncMaterials();
    if (!files.length) {
      await sendProgress(ctx, ui.error("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫—ç—à–∞."));
      isCacheProcessing = false;
      return;
    }
    const random = files[Math.floor(Math.random() * files.length)];
    const filePath = path.join(materialsPath, random);
    await sendProgress(ctx, ui.processingFile + `\nüìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: ${random}`);
    const content = await parseDocxToText(filePath);
    const parts = splitTextByLength(content, 700);
    let allSummaries = [];
    for (let idx = 0; idx < parts.length; idx++) {
      await sendProgress(ctx, ui.generatingPrompt(idx + 1, parts.length));
      const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ-–∫–∞—Å—Å–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–µ, 1–° –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞. 
–ò–∑—É—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∏–∂–µ –∏ –≤—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–µ–∑–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏. –ù–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –æ–±—â–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—Å–Ω–æ–≤—ã –∏ –±–∞–∑–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã. –£–ø–æ–º–∏–Ω–∞–π —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ, —Å–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—É. –ö–∞–∂–¥—ã–π —Ç–µ–∑–∏—Å ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.

${parts[idx]}`;
      if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
      await sendProgress(ctx, ui.promptSent);
      const summary = await gpt4allModel.generate(prompt);
      await sendProgress(ctx, ui.modelAnswerReceived);
      allSummaries.push(summary);
      const thesisList = summary
        .split(/\n+/).map(t => t.trim()).filter(Boolean)
        .map((t, i) => `üìå <b>${i + 1}.</b> ${escapeHTML(t)}`).join('\n\n');
      await ctx.replyWithHTML(`‚úÖ <b>–¢–µ–∑–∏—Å—ã –ø–æ —á–∞—Å—Ç–∏ ${idx + 1}:</b>\n\n${thesisList}`);
    }
    const finalSummary = allSummaries.join("\n---\n");
    await sendProgress(ctx, ui.savingToCache);
    saveToCacheAndSync(random, finalSummary, ctx);
    const thesisList = finalSummary
      .split(/\n+/).map(t => t.trim()).filter(Boolean)
      .map((t, i) => `üìå <b>${i + 1}.</b> ${escapeHTML(t)}`).join('\n\n');
    await ctx.replyWithHTML(`‚úÖ <b>–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ (—Ç–µ–∑–∏—Å—ã):</b>\n\n${thesisList}`);
    await sendProgress(ctx, ui.cacheSynced);
    notifyAdmin(`–ö—ç—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ñ–∞–π–ª–∞: ${random}`);
  } catch (err) {
    await sendProgress(ctx, ui.error(err.message));
    notifyAdmin(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞: ${err.message}`);
    logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞: ${err.message}`);
  } finally {
    isCacheProcessing = false;
    if (cacheQueue.length > 0) processCacheQueue();
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò (–±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞)
async function streamAIResponse(prompt, ctx) {
  try {
    if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
    const result = await gpt4allModel.generate(prompt);
    await ctx.reply("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n" + result);
  } catch (error) {
    await ctx.reply(ui.error(error.message));
    logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: " + error.message);
  }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ docx
async function parseDocxToText(filePath) {
  try {
    const result = await mammoth.extractRawText({ path: filePath });
    return result.value.trim();
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.");
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
async function generateAIQuestions(text) {
  try {
    const maxInputLength = 700;
    const truncatedText = text.length > maxInputLength ? text.substring(0, maxInputLength) + "..." : text;
    const prompt = `–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∏–∂–µ. –û—Ç–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.\n–í–û–ü–†–û–°:\n–ê)\n–ë)\n–í)\n–ì)\n–ü–†–ê–í–ò–õ–¨–ù–´–ô:`;
    if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
    return await gpt4allModel.generate(`${prompt}\n\n${truncatedText}`);
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: " + error.message);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.");
  }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Ç–µ—Å—Ç–∞
function parseTestResponse(response) {
  const lines = response.split("\n");
  return {
    question: lines[0]?.replace("–í–û–ü–†–û–°:", "").trim(),
    answers: {
      –ê: lines[1]?.slice(3).trim(),
      –ë: lines[2]?.slice(3).trim(),
      –í: lines[3]?.slice(3).trim(),
      –ì: lines[4]?.slice(3).trim(),
    },
    correct: lines[5]?.replace("–ü–†–ê–í–ò–õ–¨–ù–´–ô:", "").trim(),
  };
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç
function logAndNotify(message, ctx = null) {
  const logMessage = `[${new Date().toISOString()}] ${message}`;
  logger.info(logMessage);
  if (ctx) ctx.reply(message);
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
function mainMenuKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback("üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "materials")],
    [Markup.button.callback("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", "ask_ai")],
    [Markup.button.callback("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö—ç—à–∞", "generate_cache")],
    [Markup.button.callback("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")],
    [Markup.button.callback("üîÑ –†–µ–∑–µ—Ç", "reset")],
  ]);
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const userStates = {};
const userContexts = {};

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start((ctx) => ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", mainMenuKeyboard()));
bot.action("reset", async (ctx) => ctx.reply("–ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.", mainMenuKeyboard()));

// –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
bot.action("materials", async (ctx) => {
  try {
    const files = await fs.readdir(materialsPath);
    const docxFiles = files.filter(f => f.endsWith(".docx"));
    if (!docxFiles.length) return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
    const buttons = docxFiles.map(f => [Markup.button.callback(f, `material_${encodeURIComponent(f)}`)]);
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", Markup.inlineKeyboard(buttons));
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: " + err.message);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É
bot.action(/material_(.+)/, async (ctx) => {
  const fileName = decodeURIComponent(ctx.match[1]);
  const docxPath = path.join(materialsPath, fileName);
  const pdfName = fileName.replace(/\.docx$/i, ".pdf");
  const pdfPath = path.join(cachePath, pdfName);
  try {
    await ctx.answerCbQuery();
    await ctx.editMessageReplyMarkup(null);
    await ctx.reply(ui.processingFile);
    await convertDocxToPdf(docxPath, pdfPath);
    await ctx.replyWithDocument({ source: pdfPath, filename: pdfName });
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenuKeyboard());
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: " + err.message);
    await ctx.reply(ui.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: " + err.message));
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenuKeyboard());
  }
});

// –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ò–ò
bot.action("ask_ai", async (ctx) => {
  userStates[ctx.from.id] = "awaiting_ai_prompt";
  if (!userContexts[ctx.from.id]) userContexts[ctx.from.id] = [];
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –≤ –∫—ç—à–µ, –Ø.–î–∏—Å–∫–µ, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  if (userStates[userId] === "awaiting_ai_prompt" || userStates[userId] === "chatting_ai") {
    userStates[userId] = "chatting_ai";
    if (!userContexts[userId]) userContexts[userId] = [];
    userContexts[userId].push({ role: "user", content: ctx.message.text });
    logger.info(`[AI Q] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "${ctx.message.text}"`);
    notifyAdmin(`[AI Q] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "${ctx.message.text}"`);
    await ctx.reply(ui.searchingLocalCache);
    getAllCacheQuestions((err, rows) => {
      if (err) {
        logger.error(`[CACHE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞: ${err.message}`);
        notifyAdmin(`[CACHE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞: ${err.message}`);
        ctx.reply(ui.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à–µ."));
        return;
      }
      logger.info(`[CACHE] –í –∫—ç—à–µ ${rows.length} –∑–∞–ø–∏—Å–µ–π. –ù–∞—á–∏–Ω–∞–µ–º fuzzy –ø–æ–∏—Å–∫...`);
      notifyAdmin(`[CACHE] –í –∫—ç—à–µ ${rows.length} –∑–∞–ø–∏—Å–µ–π. –ù–∞—á–∏–Ω–∞–µ–º fuzzy –ø–æ–∏—Å–∫...`);
      const results = fuzzysort.go(ctx.message.text, rows, { key: 'prompt', threshold: -1000 });
      if (results.length > 0) {
        logger.info(`[CACHE] –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${results[0].obj.prompt}" (score: ${results[0].score})`);
        notifyAdmin(`[CACHE] –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${results[0].obj.prompt}" (score: ${results[0].score})`);
      } else {
        logger.info(`[CACHE] –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
        notifyAdmin(`[CACHE] –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      }
      if (results.length > 0 && results[0].score > -1000) {
        ctx.reply("üîé –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ (–ø–æ–∏—Å–∫ –ø–æ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏):\n" + results[0].obj.response);
        logger.info(`[CACHE] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞.`);
        notifyAdmin(`[CACHE] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞.`);
        return;
      }
      (async () => {
        await ctx.reply(ui.searchingYadisk);
        const yadiskAnswer = await fuzzyFindInYandexDisk(ctx.message.text);
        if (yadiskAnswer) {
          ctx.reply("üîé –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ:\n" + yadiskAnswer);
          logger.info(`[YADISK CACHE] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞ –Ω–∞ –Ø.–î–∏—Å–∫–µ.`);
          notifyAdmin(`[YADISK CACHE] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞ –Ω–∞ –Ø.–î–∏—Å–∫–µ.`);
          return;
        }
        try {
          logger.info(`[AI] –û—Ç–≤–µ—Ç–∞ –≤ –∫—ç—à–µ –Ω–µ—Ç, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –º–æ–¥–µ–ª–∏...`);
          notifyAdmin(`[AI] –û—Ç–≤–µ—Ç–∞ –≤ –∫—ç—à–µ –Ω–µ—Ç, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –º–æ–¥–µ–ª–∏...`);
          if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
          const contextWindow = 10;
          const context = userContexts[userId].slice(-contextWindow);
          const prompt = context.map(m => (m.role === "user" ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${m.content}` : `–ò–ò: ${m.content}`)).join('\n') + "\n–ò–ò:";
          await ctx.reply(ui.promptSent);
          const result = await gpt4allModel.generate(prompt);
          userContexts[userId].push({ role: "assistant", content: result });
          await ctx.reply(ui.answerSaved);
          saveToCacheAndSync(ctx.message.text, result, ctx);
          ctx.reply(result || "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.");
          logger.info(`[AI] –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à.`);
          notifyAdmin(`[AI] –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à.`);
        } catch (error) {
          ctx.reply(ui.error(error.message));
          logger.error(`[AI] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
          notifyAdmin(`[AI] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
        }
      })();
    });
  }
});

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è OCR —à–∞–±–ª–æ–Ω–æ–≤
const ocrTemplatesKeyboard = [[{ text: '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Å–µ–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏', callback_data: 'ocr_all_templates' }]];

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è OCR
bot.on(["photo"], async (ctx) => {
  const userId = ctx.from.id;
  if (userStates[userId] === 'awaiting_original') {
    userStates[userId] = undefined;
    userLastOcr[userId] = undefined;
  }
  const photo = ctx.message.photo.pop();
  const fileId = photo.file_id;
  const fileLink = await ctx.telegram.getFileLink(fileId);
  const filePath = path.join(tempPath, `${userId}_${Date.now()}.jpg`);
  await fs.ensureDir(tempPath);
  const res = await fetch(fileLink.href);
  const buffer = await res.arrayBuffer();
  await fs.writeFile(filePath, Buffer.from(buffer));
  if (!ctx.session) ctx.session = {};
  ctx.session.lastPhotoPath = filePath;
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR:", Markup.inlineKeyboard(ocrTemplatesKeyboard));
});

// OCR –≤—Å–µ–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏
bot.action('ocr_all_templates', async (ctx) => {
  try {
    const filePath = ctx.session && ctx.session.lastPhotoPath;
    if (!filePath || !fs.existsSync(filePath)) {
      await ctx.reply('–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.');
      return;
    }
    await ctx.reply('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤—Å–µ–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏...');
    const templates = getTemplates();
    const allResults = [];
    for (let i = 0; i < templates.length; ++i) {
      const tpl = templates[i];
      logger.info(`[BOT] –°—Ç–∞—Ä—Ç —à–∞–±–ª–æ–Ω–∞ ${i+1}: ${tpl.name}`);
      await ctx.reply(`–ò—Å–ø–æ–ª—å–∑—É—é —à–∞–±–ª–æ–Ω ${i+1}: ${tpl.name}`);
      let tesseractText = '';
      try {
        const { recognizeTextWithTemplateTesseract } = require("./modules/ocr");
        tesseractText = await recognizeTextWithTemplateTesseract(filePath, tpl.pre, tpl.post);
        logger.info(`[BOT] –†–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–±–ª–æ–Ω–∞ ${i+1}: ${tpl.name}: ${tesseractText}`);
      } catch (e) {
        tesseractText = `–û—à–∏–±–∫–∞ Tesseract: ${e.message}`;
        logger.error(`[BOT] –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞ ${i+1}: ${tpl.name}: ${e.message}`);
      }
      allResults.push({ tplName: tpl.name, text: tesseractText });
      try {
        await ctx.replyWithHTML(
          `<b>–®–∞–±–ª–æ–Ω ${i+1}: ${escapeHTML(tpl.name)}</b>\n\n<b>Tesseract:</b>\n<pre>${escapeHTML(tesseractText)}</pre>`
        );
        logger.info(`[BOT] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ —à–∞–±–ª–æ–Ω—É ${i+1}: ${tpl.name}`);
      } catch (err) {
        logger.error(`[BOT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É ${i+1}: ${tpl.name}: ${err.message}`);
      }
    }
    const mergedText = mergeOcrResultsNoDuplicates(allResults);
    await ctx.replyWithHTML(
      `<b>üìã –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –¥—É–±–ª–µ–π, –±–µ–∑ –ø–æ—Ç–µ—Ä—å):</b>\n\n<pre>${escapeHTML(mergedText)}</pre>`
    );
  } catch (e) {
    logger.error(`[BOT] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ ocr_all_templates: ${e.message}`);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: ' + e.message);
  }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ (–ø—Ä–∏–º–µ—Ä)
bot.action("generate_test", async (ctx) => {
  try {
    await streamAIResponse("–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç", ctx);
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: " + err.message);
    await ctx.reply(ui.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: " + err.message));
  }
});

// –ö–Ω–æ–ø–∫–∞ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö—ç—à–∞"
bot.action("generate_cache", async (ctx) => {
  cacheQueue.push({ ctx });
  await ctx.answerCbQuery("‚è≥ –ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.");
  await sendProgress(ctx, `–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫—ç—à–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–∑–∏—Ü–∏—è: ${cacheQueue.length}`);
  processCacheQueue();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
async function uploadToYandexDisk(localFilePath, remoteFilePath, ctx) {
  try {
    await yadisk.uploadFile(localFilePath, remoteFilePath);
    logAndNotify(`–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø.–î–∏—Å–∫: ${remoteFilePath}`, ctx);
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø.–î–∏—Å–∫: " + error.message);
    logAndNotify(ui.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø.–î–∏—Å–∫: " + error.message), ctx);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.");
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º
function saveToCacheAndSync(question, answer, ctx = null) {
  saveToCacheHistory(question, answer);
  const localPath = path.join(cachePath, "dataset.json");
  const remotePath = "/bot_cache/dataset.json";
  exportCacheToJsonFile(localPath, async (err) => {
    if (!err) {
      try {
        await uploadCacheJsonToYadisk(yadisk, localPath, remotePath);
        if (ctx) await ctx.reply(ui.cacheSynced);
        notifyAdmin(ui.cacheSynced);
        logger.info("–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω!");
      } catch (e) {
        if (ctx) await ctx.reply(ui.error(e.message));
        notifyAdmin(ui.error(e.message));
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: " + e.message);
      }
    } else {
      if (ctx) await ctx.reply(ui.error(err.message));
      notifyAdmin(ui.error(err.message));
      logger.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫—ç—à–∞ –≤ JSON: " + err.message);
    }
  });
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Telegram –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
async function downloadFile(file, userId) {
  const tempPath = path.join(__dirname, 'temp');
  await fs.ensureDir(tempPath);
  const ext = path.extname(file.file_path || '.jpg');
  const fileName = `${userId}_${Date.now()}${ext}`;
  const dest = path.join(tempPath, fileName);
  const fileLink = await bot.telegram.getFileLink(file.file_id);
  const res = await fetch(fileLink.href);
  if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${res.statusText}`);
  let buffer;
  if (typeof res.arrayBuffer === 'function') {
    buffer = Buffer.from(await res.arrayBuffer());
  } else {
    buffer = await res.buffer();
  }
  await fs.writeFile(dest, buffer);
  return dest;
}

// –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ OCR-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function evalHumanReadableScoreV2(text) {
  if (!text || typeof text !== 'string') return 0;
  const lines = text.split(/\r?\n/).map(s => s.trim()).filter(Boolean);
  if (!lines.length) return 0;
  const totalChars = text.length;
  const ruChars = (text.match(/[–ê-–Ø–∞-—è–Å—ë]/g) || []).length;
  const ruRatio = ruChars / (totalChars || 1);
  const uniqLines = new Set(lines).size;
  const bonusWords = [
    "–ê–ö–¢–ò–í–ò–†–£–ô–¢–ï", "–°–ö–ê–ß–ê–ô–¢–ï", "–ü–†–ò–õ–û–ñ–ï–ù–ò–ï", "–ú–ê–ì–ê–ó–ò–ù", "–°–ï–†–í–ò–°–´", "–≠–í–û–¢–û–†",
    "–ò–ù–ù", "–û–ì–†–ù", "–ê–î–†–ï–°", "–ö–û–ù–¢–ê–ö–¢", "–¢–ï–õ–ï–§–û–ù", "EMAIL", "E-MAIL",
    "–ö–õ–Æ–ß", "–ï–ì–ê–ò–°", "–¢–û–†–ì–û–í–õ–ò", "–ë–£–•–ì–ê–õ–¢–ï–†–ò–Ø", "–§–ò–û", "–û–û–û", "–ò–ü", "–û–ê–û"
  ];
  let bonus = 0, phoneCount = 0, emailCount = 0, innCount = 0, addressCount = 0;
  const phoneRegex = /\+?\d[\d\s\-()]{7,}/g;
  const emailRegex = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/i;
  const innRegex = /\b\d{10,12}\b/;
  const addressRegex = /(–≥\.|—É–ª\.|–ø—Ä–æ—Å–ø\.|–ø–µ—Ä\.|–¥\.|–æ—Ñ–∏—Å|–∫–æ—Ä–ø—É—Å|–∫–≤\.|–ø–ª\.|–æ–±–ª\.|—Ä–∞–π–æ–Ω|—Ä-–Ω|–ø–æ—Å–µ–ª–æ–∫|–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω)/i;
  lines.forEach(line => {
    if (phoneRegex.test(line)) phoneCount++;
    if (emailRegex.test(line)) emailCount++;
    if (innRegex.test(line)) innCount++;
    if (addressRegex.test(line)) addressCount++;
    for (const w of bonusWords) if (line.toUpperCase().includes(w)) bonus += 0.1;
  });
  const noisyLines = lines.filter(l => l.length < 5 || (l.replace(/[–ê-–Ø–∞-—è–Å—ë0-9]/gi, '').length / l.length) > 0.5).length;
  const diversityBonus = uniqLines >= 3 ? 0.5 : 0;
  let score = (
    ruRatio * 2 +
    Math.min(lines.length / 10, 1) +
    Math.min(uniqLines / lines.length, 1) +
    bonus +
    diversityBonus +
    phoneCount * 0.7 +
    emailCount * 0.7 +
    innCount * 0.5 +
    addressCount * 0.5 -
    noisyLines * 0.2
  );
  if (lines.length === 1 && lines[0].length < 10) score -= 0.5;
  return score;
}

// –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ OCR-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function selectBestOcrResultV2(allResults, semanticResult, cleanedSemantic, humanResult) {
  const candidates = [];
  allResults.forEach((r, i) => candidates.push({
    text: r,
    label: `–®–∞–±–ª–æ–Ω ${i + 1}`,
    score: evalHumanReadableScoreV2(r)
  }));
  candidates.push({ text: semanticResult, label: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞', score: evalHumanReadableScoreV2(semanticResult) });
  candidates.push({ text: cleanedSemantic, label: '–ü–æ—Å–ª–µ LanguageTool', score: evalHumanReadableScoreV2(cleanedSemantic) });
  candidates.push({ text: humanResult, label: '–§–∏–Ω–∞–ª—å–Ω—ã–π (humanReadableAssemble)', score: evalHumanReadableScoreV2(humanResult) });
  candidates.sort((a, b) => b.score - a.score);
  logger.info('[BOT] --- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ OCR ---');
  candidates.forEach(c => {
    logger.info(`[BOT] ${c.label}: score=${c.score.toFixed(2)}\n${c.text}\n---`);
  });
  logger.info(`[BOT] –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${candidates[0].label} (–æ—Ü–µ–Ω–∫–∞: ${candidates[0].score.toFixed(2)})`);
  logger.info(`[BOT] –õ—É—á—à–∏–π —Ç–µ–∫—Å—Ç:\n${candidates[0].text}`);
  return candidates[0].text;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ª—É—á—à–µ–≥–æ OCR-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendBestOcrResult(ctx, allResults, semanticResult, cleanedSemantic, humanResult) {
  let bestResult = selectBestOcrResultV2(allResults.map(r => r.text), semanticResult, cleanedSemantic, humanResult);
  let lines = bestResult.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
  lines = await filterGarbage(lines);
  const importantWords = ['–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ', '—Å–∫–∞—á–∞–π—Ç–µ', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–º–∞–≥–∞–∑–∏–Ω', '—Å–µ—Ä–≤–∏—Å', '—ç–≤–æ', '–∫–∞—Å–æ–≤—ã–µ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–∞–¥—Ä–µ—Å', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∏–Ω–Ω'];
  let garbageCandidates = [];
  const filtered = lines.filter(line => {
    const clean = line.replace(/[¬´¬ª@*%_"'\-]/g, '').trim();
    if (clean.length < 8 && !importantWords.some(w => clean.toLowerCase().includes(w))) {
      garbageCandidates.push(line);
      return false;
    }
    if ((clean.match(/[–ê-–Ø–∞-—è–Å—ë]/g) || []).length < 3 && !importantWords.some(w => clean.toLowerCase().includes(w))) {
      garbageCandidates.push(line);
      return false;
    }
    return true;
  });
  await addGarbage(garbageCandidates);
  const finalText = filtered.join('\n');
  await ctx.replyWithHTML(
    `<b>üìã –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É)</b>\n\n<pre>${escapeHTML(finalText)}</pre>`
  );
  logger.info(`[BOT] –í—Å–µ —à–∞–±–ª–æ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ò—Ç–æ–≥–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
  userStates[ctx.from.id] = 'awaiting_original';
  userLastOcr[ctx.from.id] = finalText;
  await ctx.reply('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.');
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ OCR-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userLastOcr = {};
bot.on('text', async ctx => {
  const userId = ctx.from.id;
  if (userStates[userId] === 'awaiting_original' && userLastOcr[userId]) {
    const ocrText = userLastOcr[userId];
    const origText = ctx.message.text;
    const lev = levenshtein(ocrText.replace(/\s+/g, ''), origText.replace(/\s+/g, ''));
    const maxLen = Math.max(ocrText.length, origText.length);
    const similarity = maxLen > 0 ? (1 - lev / maxLen) : 0;
    await ctx.reply(`–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${(similarity * 100).toFixed(1)}%. –°–ø–∞—Å–∏–±–æ, –≤–∞—à –ø—Ä–∏–º–µ—Ä –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ.`);
    userStates[userId] = undefined;
    userLastOcr[userId] = undefined;
    return;
  }
  // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞)
});

module.exports = {
  app,
  bot,
  mainMenuKeyboard,
  parseDocxToText,
  splitTextByLength,
  saveToCacheAndSync,
  fuzzyFindInYandexDisk,
  gpt4allModel
};
