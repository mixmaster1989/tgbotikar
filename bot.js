const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const fs = require("fs-extra");
const path = require("path");
const os = require("os");
const sqlite3 = require("sqlite3").verbose();
const mammoth = require("mammoth");
const gpt4all = require("gpt4all");
require("dotenv").config();

const YaDiskService = require("./services/yadisk_service");
const { convertDocxToPdf } = require("./modules/docx2pdf");

const yadisk = new YaDiskService(process.env.YANDEX_DISK_TOKEN);

const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all");
const materialsPath = path.join(__dirname, "materials");
const cachePath = path.join(__dirname, "cache");
const tempPath = path.join(__dirname, "temp");
const gpt4allPath = path.join(modelDir, modelName);
const gpt4allCachePath = path.join(gpt4allPath, "cache");
const bot = new Telegraf(BOT_TOKEN);
const app = express();
app.use("/static", express.static(path.join(__dirname, "static")));

// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ cache —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
fs.ensureDirSync(cachePath);

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database("database.sqlite", (err) => {
  if (err) {
    console.error("DB Error:", err.message);
    process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
  } else {
    try {
      initDatabase();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error.message);
    }
  }
});

function initDatabase() {
  db.run(`CREATE TABLE IF NOT EXISTS gpt_cache (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    prompt TEXT UNIQUE,
    response TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`);
}

let gpt4allModel = null;
async function initGPT4AllModel() {
  const model = await gpt4all.loadModel(modelName);
  return {
    generate: async (prompt) => {
      const options = {
        maxTokens: 32,
        temp: 1.5,
        topK: 1,
        topP: 0.1,
        repeatPenalty: 1.0,
        batchSize: 1,
      };
      return (await model.generate(prompt, options)).text;
    },
  };
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞
const cacheQueue = [];
let isCacheProcessing = false;

// –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
function saveToCacheHistory(file, summary) {
  const stmt = db.prepare("INSERT INTO gpt_cache (prompt, response) VALUES (?, ?)");
  stmt.run(file, summary);
  stmt.finalize();
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—á–µ—Ä–µ–∑ ADMIN_ID)
const ADMIN_ID = process.env.ADMIN_ID;
function notifyAdmin(message) {
  if (ADMIN_ID) bot.telegram.sendMessage(ADMIN_ID, `[ADMIN LOG]\n${message}`);
}

// –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å
async function sendProgress(ctx, text) {
  try { await ctx.reply(text); } catch {}
  notifyAdmin(text);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏)
function splitTextByLength(text, maxLength = 700) {
  const parts = [];
  let i = 0;
  while (i < text.length) {
    parts.push(text.substring(i, i + maxLength));
    i += maxLength;
  }
  return parts;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞ —Å –æ—á–µ—Ä–µ–¥—å—é –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
async function processCacheQueue() {
  if (isCacheProcessing || cacheQueue.length === 0) return;
  isCacheProcessing = true;

  const { ctx } = cacheQueue.shift();
  try {
    await sendProgress(ctx, "üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—ç—à–∞: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...");
    const files = await yadisk.syncMaterials();
    if (!files.length) {
      await sendProgress(ctx, "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫—ç—à–∞.");
      isCacheProcessing = false;
      return;
    }

    const random = files[Math.floor(Math.random() * files.length)];
    const filePath = path.join(materialsPath, random);
    await sendProgress(ctx, `üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: ${random}\n–ü–∞—Ä—Å–∏–Ω–≥...`);
    const content = await parseDocxToText(filePath);

    // –†–∞–∑–±–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —á–∞—Å—Ç–∏
    const parts = splitTextByLength(content, 700);
    let allSummaries = [];
    for (let idx = 0; idx < parts.length; idx++) {
      await sendProgress(ctx, `ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∑–∏—Å–æ–≤ –ø–æ —á–∞—Å—Ç–∏ ${idx + 1} –∏–∑ ${parts.length}...`);
      const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ-–∫–∞—Å—Å–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–µ, 1–° –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞. 
–ò–∑—É—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∏–∂–µ –∏ –≤—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–µ–∑–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏. –ù–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –æ–±—â–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—Å–Ω–æ–≤—ã –∏ –±–∞–∑–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã. –£–ø–æ–º–∏–Ω–∞–π —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ, —Å–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—É. –ö–∞–∂–¥—ã–π —Ç–µ–∑–∏—Å ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.

${parts[idx]}`;
      if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
      const summary = await gpt4allModel.generate(prompt);
      allSummaries.push(summary);
    }
    const finalSummary = allSummaries.join("\n---\n");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (–∫–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å)
    saveToCacheHistory(random, finalSummary);

    // –ö—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª—è–µ–º —Ç–µ–∑–∏—Å—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –±–æ—Ç
    const thesisList = finalSummary
      .split(/\n+/)
      .map(t => t.trim())
      .filter(Boolean)
      .map((t, i) => `üìå <b>${i + 1}.</b> ${t}`)
      .join('\n\n');

    await ctx.replyWithHTML(
      `‚úÖ <b>–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ (—Ç–µ–∑–∏—Å—ã):</b>\n\n${thesisList}`
    );

    await sendProgress(ctx, "‚úÖ –ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à.");
    notifyAdmin(`–ö—ç—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ñ–∞–π–ª–∞: ${random}`);

  } catch (err) {
    await sendProgress(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + err.message);
    notifyAdmin(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞: ${err.message}`);
  } finally {
    isCacheProcessing = false;
    if (cacheQueue.length > 0) processCacheQueue();
  }
}

// –°—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –æ–±—ã—á–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç-–∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
async function streamAIResponse(prompt, ctx) {
  try {
    if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
    const result = await gpt4allModel.generate(prompt);
    await ctx.reply("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n" + result);
  } catch (error) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏
async function parseDocxToText(filePath) {
  try {
    const result = await mammoth.extractRawText({ path: filePath });
    return result.value.trim();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async function generateAIQuestions(text) {
  try {
    const maxInputLength = 700;
    const truncatedText = text.length > maxInputLength ? text.substring(0, maxInputLength) + "..." : text;
    const prompt = `–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∏–∂–µ. –û—Ç–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.\n–í–û–ü–†–û–°:\n–ê)\n–ë)\n–í)\n–ì)\n–ü–†–ê–í–ò–õ–¨–ù–´–ô:`;
    if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();

    return await gpt4allModel.generate(`${prompt}\n\n${truncatedText}`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:", error.message);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.");
  }
}

function parseTestResponse(response) {
  const lines = response.split("\n");
  return {
    question: lines[0]?.replace("–í–û–ü–†–û–°:", "").trim(),
    answers: {
      –ê: lines[1]?.slice(3).trim(),
      –ë: lines[2]?.slice(3).trim(),
      –í: lines[3]?.slice(3).trim(),
      –ì: lines[4]?.slice(3).trim(),
    },
    correct: lines[5]?.replace("–ü–†–ê–í–ò–õ–¨–ù–´–ô:", "").trim(),
  };
}

function saveToCache(question, response) {
  const stmt = db.prepare("INSERT OR REPLACE INTO gpt_cache (prompt, response) VALUES (?, ?)");
  stmt.run(question, response);
  stmt.finalize();
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ –±–æ—Ç
function logAndNotify(message, ctx = null) {
  const logMessage = `[${new Date().toISOString()}] ${message}`;
  console.log(logMessage); // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
  if (ctx) ctx.reply(message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–æ—Ç
}

// –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
function mainMenuKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback("üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "materials")],
    [Markup.button.callback("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", "ask_ai")],
    [Markup.button.callback("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö—ç—à–∞", "generate_cache")],
    [Markup.button.callback("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")],
    [Markup.button.callback("üîÑ –†–µ–∑–µ—Ç", "reset")],
  ]);
}

// –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userStates = {};
const userContexts = {}; // userId: [ {role: "user"/"assistant", content: "..."} ]

bot.start((ctx) => ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", mainMenuKeyboard()));
bot.action("reset", async (ctx) => ctx.reply("–ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.", mainMenuKeyboard()));

// –ö–Ω–æ–ø–∫–∞ "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã" ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
bot.action("materials", async (ctx) => {
  try {
    const files = await fs.readdir(materialsPath);
    const docxFiles = files.filter(f => f.endsWith(".docx"));
    if (!docxFiles.length) {
      return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
    }
    const buttons = docxFiles.map(f =>
      [Markup.button.callback(f, `material_${encodeURIComponent(f)}`)]
    );
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", Markup.inlineKeyboard(buttons));
  } catch (err) {
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
bot.action(/material_(.+)/, async (ctx) => {
  const fileName = decodeURIComponent(ctx.match[1]);
  const docxPath = path.join(materialsPath, fileName);
  const pdfName = fileName.replace(/\.docx$/i, ".pdf");
  const pdfPath = path.join(cachePath, pdfName);

  try {
    await ctx.reply("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX –≤ PDF...");
    await convertDocxToPdf(docxPath, pdfPath);

    await ctx.replyWithDocument({ source: pdfPath, filename: pdfName });
    // Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF
  } catch (err) {
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: " + err.message);
  }
});

// –ö–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò"
bot.action("ask_ai", async (ctx) => {
  userStates[ctx.from.id] = "awaiting_ai_prompt";
  if (!userContexts[ctx.from.id]) userContexts[ctx.from.id] = [];
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ò–ò, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  if (userStates[userId] === "awaiting_ai_prompt" || userStates[userId] === "chatting_ai") {
    userStates[userId] = "chatting_ai";
    if (!userContexts[userId]) userContexts[userId] = [];
    userContexts[userId].push({ role: "user", content: ctx.message.text });

    try {
      if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
      const contextWindow = 10;
      const context = userContexts[userId].slice(-contextWindow);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      const prompt = context.map(m => (m.role === "user" ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${m.content}` : `–ò–ò: ${m.content}`)).join('\n') + "\n–ò–ò:";

      const result = await gpt4allModel.generate(prompt);
      userContexts[userId].push({ role: "assistant", content: result });

      await ctx.reply(result || "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.");
    } catch (error) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + error.message);
    }
  }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç")
bot.action("generate_test", async (ctx) => {
  try {
    await streamAIResponse("–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç", ctx);
  } catch (err) {
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: " + err.message);
  }
});

// –ö–Ω–æ–ø–∫–∞ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö—ç—à–∞" ‚Äî —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
bot.action("generate_cache", async (ctx) => {
  cacheQueue.push({ ctx });
  await ctx.answerCbQuery("‚è≥ –ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.");
  await sendProgress(ctx, `–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫—ç—à–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–∑–∏—Ü–∏—è: ${cacheQueue.length}`);
  processCacheQueue();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
async function uploadToYandexDisk(localFilePath, remoteFilePath, ctx) {
  try {
    await yadisk.uploadFile(localFilePath, remoteFilePath);
    logAndNotify(`–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø.–î–∏—Å–∫: ${remoteFilePath}`, ctx);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø.–î–∏—Å–∫ (${localFilePath}):`, error.message);
    logAndNotify(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø.–î–∏—Å–∫: ${error.message}`, ctx);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.");
  }
}

(async () => {
  app.listen(PORT, () => console.log(`üåç Web App: http://localhost:${PORT}`));
  await bot.launch();
  console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
})();
