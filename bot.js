// bot.js ‚Äî –ü–æ–ª–Ω—ã–π —Ä–µ–±–∏–ª–¥ —Å –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é

// === –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ===
const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const fs = require("fs-extra");
const path = require("path");
const os = require("os");
const sqlite3 = require("sqlite3").verbose();
const mammoth = require("mammoth");
const gpt4all = require("gpt4all");
require("dotenv").config();

const YaDiskService = require("./services/yadisk_service");
const yadisk = new YaDiskService(process.env.YANDEX_DISK_TOKEN);

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all");
const materialsPath = path.join(__dirname, "materials");
const GENERATION_TIMEOUT = 60000; // 60 —Å–µ–∫—É–Ω–¥

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
const bot = new Telegraf(BOT_TOKEN);
const app = express();
app.use("/static", express.static(path.join(__dirname, "static")));

const db = new sqlite3.Database("database.sqlite", (err) => {
    if (err) console.error("DB Error:", err);
    else initDatabase();
});

function initDatabase() {
    db.run(
        `CREATE TABLE IF NOT EXISTS gpt_cache (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      prompt TEXT UNIQUE,
      response TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )`
    );
}

let gpt4allModel = null;
async function initGPT4AllModel() {
    const model = await gpt4all.loadModel(modelName);
    return {
        generate: async (prompt) => {
            const options = {
                maxTokens: 256,        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                temp: 0.7,             // –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                topK: 40,             // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä–∫—É —Ç–æ–ø-—Ç–æ–∫–µ–Ω–æ–≤
                topP: 0.4,            // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
                repeatPenalty: 1.18,   // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä—ã
                batchSize: 8          // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            };
            return (await model.generate(prompt, options)).text;
        }
    };
}

async function parseDocxToHtml(filePath) {
    const result = await mammoth.convertToHtml({ path: filePath });
    return result.value.trim();
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async function generateAIQuestions(text) {
    // –û–±—Ä–µ–∑–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const maxInputLength = 1000;
    const truncatedText = text.length > maxInputLength
        ? text.substring(0, maxInputLength) + "..."
        : text;

    // –£–ø—Ä–æ—â–∞–µ–º –ø—Ä–æ–º–ø—Ç
    const prompt = `–ü–æ —Ç–µ–∫—Å—Ç—É —Å–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.
–í–û–ü–†–û–°: –∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å
–ê) –æ—Ç–≤–µ—Ç
–ë) –æ—Ç–≤–µ—Ç
–í) –æ—Ç–≤–µ—Ç
–ì) –æ—Ç–≤–µ—Ç
–ü–†–ê–í–ò–õ–¨–ù–´–ô: –±—É–∫–≤–∞

–¢–µ–∫—Å—Ç: ${truncatedText}`;

    if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
    return await gpt4allModel.generate(prompt);
}

function parseTestResponse(response) {
    const lines = response.split("\n");
    return {
        question: lines[0].replace("–í–û–ü–†–û–°:", "").trim(),
        answers: {
            –ê: lines[1].slice(3).trim(),
            –ë: lines[2].slice(3).trim(),
            –í: lines[3].slice(3).trim(),
            –ì: lines[4].slice(3).trim(),
        },
        correct: lines[5].replace("–ü–†–ê–í–ò–õ–¨–ù–´–ô:", "").trim(),
    };
}

// === –ú–µ–Ω—é –∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
bot.start(async (ctx) => {
    return ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", Markup.inlineKeyboard([
        [Markup.button.callback("üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "materials")],
        [Markup.button.callback("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¢–µ—Å—Ç–∞", "generate_test")],
        [Markup.button.callback("üìä –ö—ç—à", "cache_ops")],
        [Markup.button.callback("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")],
    ]));
});

bot.action("materials", async (ctx) => {
    const files = await yadisk.syncMaterials();
    if (!files.length) return ctx.reply("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");

    const buttons = files.map((f) => [Markup.button.callback(f, `open_${f}`)]);
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", Markup.inlineKeyboard(buttons));
});

const { convertDocxToPdf } = require('./modules/docx2pdf');

bot.action(/open_(.+)/, async (ctx) => {
    const fileName = ctx.match[1];
    const fullPath = path.join(materialsPath, fileName);
    const pdfFile = `${fileName.replace(/\.[^.]+$/, '')}_${Date.now()}.pdf`;
    const pdfPath = path.join(__dirname, 'static', 'previews', pdfFile);

    try {
        await convertDocxToPdf(fullPath, pdfPath);
        await ctx.replyWithDocument({ source: pdfPath, filename: fileName.replace(/\.[^.]+$/, '') + '.pdf' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX –≤ PDF:', err);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.');
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞
bot.action("generate_test", async (ctx) => {
    try {
        await ctx.reply("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞...");

        const files = await yadisk.syncMaterials();
        if (!files.length) {
            return ctx.reply("‚ùå –ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.");
        }

        const random = files[Math.floor(Math.random() * files.length)];
        const filePath = path.join(materialsPath, random);

        await ctx.reply(`üìö –ò—Å–ø–æ–ª—å–∑—É—é –º–∞—Ç–µ—Ä–∏–∞–ª: ${random}`);

        const content = await parseDocxToText(filePath);
        const test = await generateAIQuestions(content);
        const parsed = parseTestResponse(test);

        let message = `‚ùì <b>${parsed.question}</b>\n`;
        for (const key in parsed.answers) {
            message += `\n${key}) ${parsed.answers[key]}`;
        }
        message += `\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${parsed.correct}`;

        await ctx.replyWithHTML(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        await ctx.reply(`‚ùå ${error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.'}`);
    } finally {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenuKeyboard);
    }
});

bot.action("cache_ops", async (ctx) => {
    ctx.reply("üìä –ö—ç—à:", Markup.inlineKeyboard([
        [Markup.button.callback("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", "clear_cache")],
        [Markup.button.callback("–ù–∞–∑–∞–¥", "start")],
    ]));
});

bot.action("clear_cache", async (ctx) => {
    db.run("DELETE FROM gpt_cache", () => ctx.reply("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω"));
});

bot.action("settings", async (ctx) => {
    ctx.reply("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", Markup.inlineKeyboard([
        [Markup.button.callback("üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", "sync_disk")],
        [Markup.button.callback("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏", "check_model")],
        [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "start")],
    ]));
});

bot.action("sync_disk", async (ctx) => {
    const files = await yadisk.syncMaterials();
    ctx.reply(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${files.length} —Ñ–∞–π–ª–æ–≤`);
});

bot.action("check_model", async (ctx) => {
    if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
    ctx.reply("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.");
});

// === –ó–∞–ø—É—Å–∫ ===
(async () => {
    app.listen(PORT, () => console.log(`üåç Web App: http://localhost:${PORT}`));
    await bot.launch();
    console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
})();