// --- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ---
const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const path = require("path");
const fs = require("fs-extra");
const mammoth = require("mammoth");
const gpt4all = require("gpt4all");
require("dotenv").config();
const os = require("os");
const sqlite3 = require("sqlite3").verbose();
const { spawn } = require('child_process');
const YaDiskService = require('./services/yadisk_service');
const { convertDocxToPdf } = require('./modules/docx2pdf');
const pTimeout = require('p-timeout');

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏ ---
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all");
const finalModelPath = path.join(modelDir, modelName);
const materialsPath = path.join(__dirname, "materials");
const PORT = process.env.PORT || 3000;
const webAppUrl = `http://89.232.176.215:${PORT}`;

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ ---
const bot = new Telegraf(process.env.BOT_TOKEN, { handlerTimeout: 300000 });
const app = express();
app.use("/static", express.static(path.join(__dirname, "static")));
const yadisk = new YaDiskService(process.env.YANDEX_DISK_TOKEN);

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
let gpt4allModel = null;

// --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ ---
process.on('unhandledRejection', (reason) => console.error('Unhandled Rejection:', reason));
process.on('uncaughtException', (error) => console.error('Uncaught Exception:', error));

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function trimText(text, maxLen = 1000) {
    if (text.length <= maxLen) return text;
    return text.slice(0, maxLen);
}

async function initGPT4AllModel() {
    try {
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT4All...");
        const model = await gpt4all.loadModel(modelName);
        console.log("‚úÖ –ú–æ–¥–µ–ª—å GPT4All –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
        return {
            generate: async (prompt) => {
                try {
                    console.log("üì§ –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏:", prompt.slice(0, 100) + "...");
                    const answer = await model.generate(prompt);
                    console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω.");
                    return answer.text || answer;
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
                    throw error;
                }
            }
        };
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPT4All:", error);
        return null;
    }
}

async function parseDocxToText(filePath) {
    try {
        console.log(`–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${filePath}`);
        const result = await mammoth.extractRawText({ path: filePath });
        console.log(`–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω (–¥–ª–∏–Ω–∞: ${result.value.length})`);
        return result.value;
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:", err);
        throw err;
    }
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ AI ---
async function generateAIQuestions(text) {
    try {
        if (!gpt4allModel) {
            gpt4allModel = await initGPT4AllModel();
        }
        if (!gpt4allModel) throw new Error("–ú–æ–¥–µ–ª—å GPT4All –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");

        const trimmedText = trimText(text, 700); // –ú–µ–Ω—å—à–µ —Ç–µ–∫—Å—Ç–∞ ‚Äî –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–≤–µ—Ç
        const prompt = `–°–¥–µ–ª–∞–π –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: ${trimmedText}`;
        return await gpt4allModel.generate(prompt);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:", err);
        throw err;
    }
}

// --- –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ ---
function parseTestResponse(response) {
    // –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: –í–æ–ø—Ä–æ—Å\nA) ...\nB) ...\nC) ...\nD) ...\n–û—Ç–≤–µ—Ç: X
    const lines = response.split('\n').filter(Boolean);
    const question = lines[0] || "";
    const answers = {};
    let correct = "";
    lines.slice(1).forEach(line => {
        const match = line.match(/^([A-D])\)\s*(.+)$/);
        if (match) answers[match[1]] = match[2];
        if (/–û—Ç–≤–µ—Ç[:\-]?\s*([A-D])/i.test(line)) correct = RegExp.$1;
    });
    return { question, answers, correct };
}

// --- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ---
const mainMenuKeyboard = Markup.keyboard([
    ['üìö –ö—ç—à', 'ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è'],
    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
]).resize().oneTime(false);

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã" ---
bot.action("materials", async (ctx) => {
    try {
        console.log("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã' –≤—ã–∑–≤–∞–Ω.");
        await ctx.answerCbQuery("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...");
        const files = await fs.readdir(materialsPath);
        console.log("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:", files);
        if (!files.length) return ctx.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
        const fileButtons = files.map((file) => Markup.button.callback(file, `file_${file}`));
        await ctx.reply("üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:", Markup.inlineKeyboard(fileButtons, { columns: 1 }));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã':", error);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
    }
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF ---
bot.action(/^file_(.+)$/, async (ctx) => {
    const fileName = ctx.match[1];
    const fullPath = path.join(materialsPath, fileName);
    const pdfFile = `${fileName.replace(/\.[^.]+$/, '')}_${Date.now()}.pdf`;
    const pdfPath = path.join(__dirname, 'static', 'previews', pdfFile);
    try {
        console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ${fileName} –≤ PDF...`);
        await convertDocxToPdf(fullPath, pdfPath);
        console.log(`PDF –≥–æ—Ç–æ–≤: ${pdfPath}`);
        await ctx.replyWithDocument(
            { source: pdfPath, filename: `${fileName.replace(/\.[^.]+$/, '')}.pdf`, contentType: 'application/pdf' },
            { caption: `üìÑ ${fileName.replace(/\.[^.]+$/, '')}` }
        );
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ DOCX –≤ PDF:', err);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.');
    }
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –ª–æ–≥–∞–º–∏ ---
bot.action("generate_test", async (ctx) => {
    try {
        const startTime = Date.now();
        console.log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", ctx.from.username || ctx.from.id);

        const files = await fs.readdir(materialsPath);
        if (!files.length) return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞.");

        const random = files[Math.floor(Math.random() * files.length)];
        const filePath = path.join(materialsPath, random);
        await ctx.reply(`üìö –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${random}`);

        const progressMessage = await ctx.reply("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å...\n[                    ] 0%");
        const statuses = [
            "üìñ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...",
            "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞...",
            "üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...",
            "üì¶ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ..."
        ];
        const totalSteps = statuses.length;
        const totalTime = 40; // –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 40 —Å–µ–∫ –¥–ª—è UX
        const updateInterval = totalTime / totalSteps;

        for (let i = 0; i < totalSteps; i++) {
            await new Promise((resolve) => setTimeout(resolve, updateInterval * 1000));
            const progress = Math.round(((i + 1) / totalSteps) * 100);
            const progressBar = `[${"=".repeat(progress / 5)}${" ".repeat(20 - progress / 5)}] ${progress}%`;
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                progressMessage.message_id,
                null,
                `${statuses[i]}\n${progressBar}`
            );
            console.log(`–®–∞–≥ ${i + 1}/${totalSteps}: ${statuses[i]}`);
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        const content = await pTimeout(parseDocxToText(filePath), 120000, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏");

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç
        const test = await pTimeout(generateAIQuestions(content), 120000, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏");
        const parsed = parseTestResponse(test);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        let message = `‚ùì <b>${parsed.question}</b>\n`;
        for (const key in parsed.answers) {
            message += `\n${key}) ${parsed.answers[key]}`;
        }
        message += `\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${parsed.correct}`;

        await ctx.replyWithHTML(message);

        const endTime = Date.now();
        const executionTime = ((endTime - startTime) / 1000).toFixed(2);
        await ctx.reply(`‚è±Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${executionTime} —Å–µ–∫—É–Ω–¥.`);
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenuKeyboard);
        console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${executionTime} —Å–µ–∫—É–Ω–¥.`);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:", err);
        await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${err.message}`);
    }
});

// --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
(async () => {
    try {
        await bot.launch();
        app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
        console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
    } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
        process.exit(1);
    }
})();