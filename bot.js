// –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π bot.js —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—ç—à–∞"

const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const fs = require("fs-extra");
const path = require("path");
const os = require("os");
const sqlite3 = require("sqlite3").verbose();
const mammoth = require("mammoth");
const gpt4all = require("gpt4all");
require("dotenv").config();

const YaDiskService = require("./services/yadisk_service");
const { convertDocxToPdf } = require("./modules/docx2pdf");

const yadisk = new YaDiskService(process.env.YANDEX_DISK_TOKEN);
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all");
const materialsPath = path.join(__dirname, "materials");
const datasetPath = path.join(__dirname, "dataset.json");

const bot = new Telegraf(BOT_TOKEN);
const app = express();
app.use("/static", express.static(path.join(__dirname, "static")));

const db = new sqlite3.Database("database.sqlite", (err) => {
  if (err) console.error("DB Error:", err);
  else initDatabase();
});

function initDatabase() {
  db.run(`CREATE TABLE IF NOT EXISTS gpt_cache (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    prompt TEXT UNIQUE,
    response TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`);
}

let gpt4allModel = null;
async function initGPT4AllModel() {
  const model = await gpt4all.loadModel(modelName);
  return {
    generate: async (prompt) => {
      const options = {
        maxTokens: 192,
        temp: 0.65,
        topK: 30,
        topP: 0.35,
        repeatPenalty: 1.2,
        batchSize: 6,
      };
      return (await model.generate(prompt, options)).text;
    },
  };
}

async function parseDocxToText(filePath) {
  const result = await mammoth.extractRawText({ path: filePath });
  return result.value.trim();
}

async function saveToDataset(question, answer) {
  const data = fs.existsSync(datasetPath)
    ? JSON.parse(await fs.readFile(datasetPath, "utf8"))
    : [];
  data.push({ question, answer });
  await fs.writeFile(datasetPath, JSON.stringify(data, null, 2), "utf8");
  await yadisk.uploadFile(datasetPath, "dataset.json");
}

function mainMenuKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback("üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "materials")],
    [Markup.button.callback("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¢–µ—Å—Ç–∞", "generate_test")],
    [Markup.button.callback("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö—ç—à–∞", "generate_cache")],
    [Markup.button.callback("üìä –ö—ç—à", "cache_ops")],
    [Markup.button.callback("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")],
    [Markup.button.callback("üîÑ –†–µ–∑–µ—Ç", "reset")],
  ]);
}

bot.start((ctx) => ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", mainMenuKeyboard()));

bot.action("generate_cache", async (ctx) => {
  await ctx.reply("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—ç—à–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");
  const files = await yadisk.syncMaterials();
  if (!files.length) return ctx.reply("–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");

  const file = files[Math.floor(Math.random() * files.length)];
  const filePath = path.join(materialsPath, file);
  const content = await parseDocxToText(filePath);

  if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();

  const questionPrompt = `–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—É:
\n\n${content.substring(0, 700)}...`;
  const question = await gpt4allModel.generate(questionPrompt);

  const answerPrompt = `–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${question}`;
  const answer = await gpt4allModel.generate(answerPrompt);

  db.run(
    `INSERT OR IGNORE INTO gpt_cache (prompt, response) VALUES (?, ?)`,
    [question, answer],
    (err) => {
      if (err) console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à:", err);
    }
  );

  await saveToDataset(question, answer);
  await ctx.replyWithHTML(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫—ç—à –∏ –¥–∞—Ç–∞—Å–µ—Ç:
<b>–í–æ–ø—Ä–æ—Å:</b> ${question}
<b>–û—Ç–≤–µ—Ç:</b> ${answer}`);
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenuKeyboard());
});

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø—Ä–µ–∂–Ω–∏–π ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ç–µ—Å—Ç—ã, PDF, –∫—ç—à, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫...

(async () => {
  app.listen(PORT, () => console.log(`üåç Web App: http://localhost:${PORT}`));
  await bot.launch();
  console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
})();
