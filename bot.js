const { Telegraf, Markup, session } = require("telegraf");
const express = require("express");
const fs = require("fs-extra");
const path = require("path");
const os = require("os");
const sqlite3 = require("sqlite3").verbose();
const mammoth = require("mammoth");
const gpt4all = require("gpt4all");
const fuzzysort = require('fuzzysort'); // –î–æ–±–∞–≤–ª–µ–Ω–æ

// --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ require ---
function safeRequire(modulePath) {
  try {
    return require(modulePath);
  } catch (e) {
    console.error(`[FATAL] –û—à–∏–±–∫–∞ –ø—Ä–∏ require('${modulePath}'):`, e);
    throw e;
  }
}

const { exportCacheToJsonFile, uploadCacheJsonToYadisk } = safeRequire("./modules/cache_export");
const ui = safeRequire("./modules/ui_messages"); // –ù–æ–≤—ã–π –º–æ–¥—É–ª—å UI-—Å–æ–æ–±—â–µ–Ω–∏–π
const logger = safeRequire("./modules/logger"); // <-- –¥–æ–±–∞–≤–ª–µ–Ω winston logger
const { recognizeText } = safeRequire("./modules/ocr"); // OCR-–º–æ–¥—É–ª—å
const { convertDocxToPdf } = safeRequire("./modules/docx2pdf");
const { saveToCacheHistory, getAllCacheQuestions, fuzzyFindInCache } = safeRequire("./modules/cache");

require("dotenv").config();

const YaDiskService = require("./services/yadisk_service");

const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const modelName = "Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf";
const modelDir = path.join(os.homedir(), ".cache", "gpt4all");
const materialsPath = path.join(__dirname, "materials");
const cachePath = path.join(__dirname, "cache");
const tempPath = path.join(__dirname, "temp");
const gpt4allPath = path.join(modelDir, modelName);
const gpt4allCachePath = path.join(gpt4allPath, "cache");
const bot = new Telegraf(BOT_TOKEN);
bot.use(session());
const app = express();
app.use("/static", express.static(path.join(__dirname, "static")));

// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ cache —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
fs.ensureDirSync(cachePath);

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database("database.sqlite", (err) => {
  if (err) {
    logger.error("DB Error: " + err.message);
    process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
  } else {
    try {
      initDatabase();
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " + error.message);
    }
  }
});

function initDatabase() {
  db.run(`CREATE TABLE IF NOT EXISTS gpt_cache (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    prompt TEXT UNIQUE,
    response TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`);
}

let gpt4allModel = null;
async function initGPT4AllModel() {
  const model = await gpt4all.loadModel(modelName);
  return {
    generate: async (prompt) => {
      const options = {
        maxTokens: 32,
        temp: 1.5,
        topK: 1,
        topP: 0.1,
        repeatPenalty: 1.0,
        batchSize: 1,
      };
      return (await model.generate(prompt, options)).text;
    },
  };
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞
const cacheQueue = [];
let isCacheProcessing = false;

// Fuzzy –ø–æ–∏—Å–∫ –ø–æ –∫—ç—à—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
async function fuzzyFindInYandexDisk(question) {
  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∫—ç—à–∞ —Å –Ø.–î–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, cache/dataset.json)
    const remotePath = "/bot_cache/dataset.json";
    const localPath = path.join(cachePath, "dataset.json");
    await yadisk.downloadFileByPath(remotePath, localPath);

    if (!fs.existsSync(localPath)) return null;
    const data = JSON.parse(fs.readFileSync(localPath, "utf8"));
    if (!Array.isArray(data)) return null;

    // data: [{ prompt, response }, ...]
    const results = fuzzysort.go(question, data, { key: 'prompt', threshold: -1000 });
    if (results.length > 0 && results[0].score > -1000) {
      return results[0].obj.response;
    }
    return null;
  } catch (err) {
    logger.error(`[YADISK CACHE] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${err.message}`);
    notifyAdmin(`[YADISK CACHE] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${err.message}`);
    return null;
  }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—á–µ—Ä–µ–∑ ADMIN_ID)
const ADMIN_ID = process.env.ADMIN_ID;
function notifyAdmin(message) {
  if (ADMIN_ID) bot.telegram.sendMessage(ADMIN_ID, `[ADMIN LOG]\n${message}`);
  logger.info(`[ADMIN NOTIFY] ${message}`);
}

// –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å
async function sendProgress(ctx, text) {
  try { await ctx.reply(text); } catch {}
  notifyAdmin(text);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏)
function splitTextByLength(text, maxLength = 700) {
  const parts = [];
  let i = 0;
  while (i < text.length) {
    parts.push(text.substring(i, i + maxLength));
    i += maxLength;
  }
  return parts;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞ —Å –æ—á–µ—Ä–µ–¥—å—é –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
async function processCacheQueue() {
  if (isCacheProcessing || cacheQueue.length === 0) return;
  isCacheProcessing = true;

  const { ctx } = cacheQueue.shift();
  try {
    await sendProgress(ctx, ui.processingFile);
    const files = await yadisk.syncMaterials();
    if (!files.length) {
      await sendProgress(ctx, ui.error("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫—ç—à–∞."));
      isCacheProcessing = false;
      return;
    }

    const random = files[Math.floor(Math.random() * files.length)];
    const filePath = path.join(materialsPath, random);
    await sendProgress(ctx, ui.processingFile + `\nüìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: ${random}`);
    const content = await parseDocxToText(filePath);

    // –†–∞–∑–±–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —á–∞—Å—Ç–∏
    const parts = splitTextByLength(content, 700);
    let allSummaries = [];
    for (let idx = 0; idx < parts.length; idx++) {
      await sendProgress(ctx, ui.generatingPrompt(idx + 1, parts.length));
      const prompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ-–∫–∞—Å—Å–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–µ, 1–° –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞. 
–ò–∑—É—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∏–∂–µ –∏ –≤—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–µ–∑–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏. –ù–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –æ–±—â–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—Å–Ω–æ–≤—ã –∏ –±–∞–∑–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã. –£–ø–æ–º–∏–Ω–∞–π —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ, —Å–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—É. –ö–∞–∂–¥—ã–π —Ç–µ–∑–∏—Å ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.

${parts[idx]}`;
      if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
      await sendProgress(ctx, ui.promptSent);
      const summary = await gpt4allModel.generate(prompt);
      await sendProgress(ctx, ui.modelAnswerReceived);
      allSummaries.push(summary);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∑–∏—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞
      const thesisList = summary
        .split(/\n+/)
        .map(t => t.trim())
        .filter(Boolean)
        .map((t, i) => `üìå <b>${i + 1}.</b> ${t}`)
        .join('\n\n');
      await ctx.replyWithHTML(
        `‚úÖ <b>–¢–µ–∑–∏—Å—ã –ø–æ —á–∞—Å—Ç–∏ ${idx + 1}:</b>\n\n${thesisList}`
      );
    }
    const finalSummary = allSummaries.join("\n---\n");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (–∫–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å)
    await sendProgress(ctx, ui.savingToCache);
    saveToCacheAndSync(random, finalSummary, ctx);

    // –ö—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª—è–µ–º —Ç–µ–∑–∏—Å—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –±–æ—Ç
    const thesisList = finalSummary
      .split(/\n+/)
      .map(t => t.trim())
      .filter(Boolean)
      .map((t, i) => `üìå <b>${i + 1}.</b> ${t}`)
      .join('\n\n');

    await ctx.replyWithHTML(
      `‚úÖ <b>–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ (—Ç–µ–∑–∏—Å—ã):</b>\n\n${thesisList}`
    );

    await sendProgress(ctx, ui.cacheSynced);
    notifyAdmin(`–ö—ç—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ñ–∞–π–ª–∞: ${random}`);

  } catch (err) {
    await sendProgress(ctx, ui.error(err.message));
    notifyAdmin(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞: ${err.message}`);
    logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞: ${err.message}`);
  } finally {
    isCacheProcessing = false;
    if (cacheQueue.length > 0) processCacheQueue();
  }
}

// –°—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –æ–±—ã—á–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç-–∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
async function streamAIResponse(prompt, ctx) {
  try {
    if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();
    const result = await gpt4allModel.generate(prompt);
    await ctx.reply("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n" + result);
  } catch (error) {
    await ctx.reply(ui.error(error.message));
    logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: " + error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏
async function parseDocxToText(filePath) {
  try {
    const result = await mammoth.extractRawText({ path: filePath });
    return result.value.trim();
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async function generateAIQuestions(text) {
  try {
    const maxInputLength = 700;
    const truncatedText = text.length > maxInputLength ? text.substring(0, maxInputLength) + "..." : text;
    const prompt = `–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∏–∂–µ. –û—Ç–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.\n–í–û–ü–†–û–°:\n–ê)\n–ë)\n–í)\n–ì)\n–ü–†–ê–í–ò–õ–¨–ù–´–ô:`;
    if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();

    return await gpt4allModel.generate(`${prompt}\n\n${truncatedText}`);
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: " + error.message);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.");
  }
}

function parseTestResponse(response) {
  const lines = response.split("\n");
  return {
    question: lines[0]?.replace("–í–û–ü–†–û–°:", "").trim(),
    answers: {
      –ê: lines[1]?.slice(3).trim(),
      –ë: lines[2]?.slice(3).trim(),
      –í: lines[3]?.slice(3).trim(),
      –ì: lines[4]?.slice(3).trim(),
    },
    correct: lines[5]?.replace("–ü–†–ê–í–ò–õ–¨–ù–´–ô:", "").trim(),
  };
}


// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ –±–æ—Ç
function logAndNotify(message, ctx = null) {
  const logMessage = `[${new Date().toISOString()}] ${message}`;
  logger.info(logMessage); // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
  if (ctx) ctx.reply(message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–æ—Ç
}

// –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
function mainMenuKeyboard() {
  return Markup.inlineKeyboard([
    [Markup.button.callback("üìÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "materials")],
    [Markup.button.callback("ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", "ask_ai")],
    [Markup.button.callback("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö—ç—à–∞", "generate_cache")],
    [Markup.button.callback("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")],
    [Markup.button.callback("üîÑ –†–µ–∑–µ—Ç", "reset")],
  ]);
}

// –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userStates = {};
const userContexts = {}; // userId: [ {role: "user"/"assistant", content: "..."} ]

bot.start((ctx) => ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", mainMenuKeyboard()));
bot.action("reset", async (ctx) => ctx.reply("–ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.", mainMenuKeyboard()));

// –ö–Ω–æ–ø–∫–∞ "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã" ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
bot.action("materials", async (ctx) => {
  try {
    const files = await fs.readdir(materialsPath);
    const docxFiles = files.filter(f => f.endsWith(".docx"));
    if (!docxFiles.length) {
      return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
    }
    const buttons = docxFiles.map(f =>
      [Markup.button.callback(f, `material_${encodeURIComponent(f)}`)]
    );
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", Markup.inlineKeyboard(buttons));
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: " + err.message);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
bot.action(/material_(.+)/, async (ctx) => {
  const fileName = decodeURIComponent(ctx.match[1]);
  const docxPath = path.join(materialsPath, fileName);
  const pdfName = fileName.replace(/\.docx$/i, ".pdf");
  const pdfPath = path.join(cachePath, pdfName);

  try {
    await ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await ctx.editMessageReplyMarkup(null); // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await ctx.reply(ui.processingFile);
    
    await convertDocxToPdf(docxPath, pdfPath);
    await ctx.replyWithDocument({ source: pdfPath, filename: pdfName });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenuKeyboard());
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: " + err.message);
    await ctx.reply(ui.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: " + err.message));
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenuKeyboard());
  }
});

// –ö–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò"
bot.action("ask_ai", async (ctx) => {
  userStates[ctx.from.id] = "awaiting_ai_prompt";
  if (!userContexts[ctx.from.id]) userContexts[ctx.from.id] = [];
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:");
});

// –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–≤–µ—Ä–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∫—ç—à –∏ –Ω–∞ –Ø.–î–∏—Å–∫
bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  if (userStates[userId] === "awaiting_ai_prompt" || userStates[userId] === "chatting_ai") {
    userStates[userId] = "chatting_ai";
    if (!userContexts[userId]) userContexts[userId] = [];
    userContexts[userId].push({ role: "user", content: ctx.message.text });

    logger.info(`[AI Q] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "${ctx.message.text}"`);
    notifyAdmin(`[AI Q] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "${ctx.message.text}"`);

    // 1. Fuzzy –ø–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
    await ctx.reply(ui.searchingLocalCache);
    getAllCacheQuestions((err, rows) => {
      if (err) {
        logger.error(`[CACHE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞: ${err.message}`);
        notifyAdmin(`[CACHE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞: ${err.message}`);
        ctx.reply(ui.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à–µ."));
        return;
      }
      logger.info(`[CACHE] –í –∫—ç—à–µ ${rows.length} –∑–∞–ø–∏—Å–µ–π. –ù–∞—á–∏–Ω–∞–µ–º fuzzy –ø–æ–∏—Å–∫...`);
      notifyAdmin(`[CACHE] –í –∫—ç—à–µ ${rows.length} –∑–∞–ø–∏—Å–µ–π. –ù–∞—á–∏–Ω–∞–µ–º fuzzy –ø–æ–∏—Å–∫...`);

      const results = fuzzysort.go(ctx.message.text, rows, { key: 'prompt', threshold: -1000 });
      if (results.length > 0) {
        logger.info(`[CACHE] –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${results[0].obj.prompt}" (score: ${results[0].score})`);
        notifyAdmin(`[CACHE] –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${results[0].obj.prompt}" (score: ${results[0].score})`);
      } else {
        logger.info(`[CACHE] –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
        notifyAdmin(`[CACHE] –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      }

      if (results.length > 0 && results[0].score > -1000) {
        ctx.reply("üîé –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ (–ø–æ–∏—Å–∫ –ø–æ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏):\n" + results[0].obj.response);
        logger.info(`[CACHE] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞.`);
        notifyAdmin(`[CACHE] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞.`);
        return;
      }

      // 2. Fuzzy –ø–æ–∏—Å–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
      (async () => {
        await ctx.reply(ui.searchingYadisk);
        const yadiskAnswer = await fuzzyFindInYandexDisk(ctx.message.text);
        if (yadiskAnswer) {
          ctx.reply("üîé –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ:\n" + yadiskAnswer);
          logger.info(`[YADISK CACHE] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞ –Ω–∞ –Ø.–î–∏—Å–∫–µ.`);
          notifyAdmin(`[YADISK CACHE] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞ –Ω–∞ –Ø.–î–∏—Å–∫–µ.`);
          return;
        }

        // 3. –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫—ç—à–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
        try {
          logger.info(`[AI] –û—Ç–≤–µ—Ç–∞ –≤ –∫—ç—à–µ –Ω–µ—Ç, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –º–æ–¥–µ–ª–∏...`);
          notifyAdmin(`[AI] –û—Ç–≤–µ—Ç–∞ –≤ –∫—ç—à–µ –Ω–µ—Ç, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –º–æ–¥–µ–ª–∏...`);
          if (!gpt4allModel) gpt4allModel = await initGPT4AllModel();

          const contextWindow = 10;
          const context = userContexts[userId].slice(-contextWindow);
          const prompt = context.map(m => (m.role === "user" ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${m.content}` : `–ò–ò: ${m.content}`)).join('\n') + "\n–ò–ò:";

          await ctx.reply(ui.promptSent);
          const result = await gpt4allModel.generate(prompt);
          userContexts[userId].push({ role: "assistant", content: result });

          await ctx.reply(ui.answerSaved);
          saveToCacheAndSync(ctx.message.text, result, ctx);

          ctx.reply(result || "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.");
          logger.info(`[AI] –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à.`);
          notifyAdmin(`[AI] –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à.`);
        } catch (error) {
          ctx.reply(ui.error(error.message));
          logger.error(`[AI] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
          notifyAdmin(`[AI] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
        }
      })();
    });
  }
});

// --- OCR —à–∞–±–ª–æ–Ω—ã: —Ç–æ–ø-10 –ª—É—á—à–∏—Ö ---
const ocrTemplates = [
  { pre: 'cropTextBlock', post: 'strong', name: 'cropTextBlock+strong' },
  { pre: 'cropTextBlock', post: 'medium', name: 'cropTextBlock+medium' },
  { pre: 'cropTextBlock', post: 'weak', name: 'cropTextBlock+weak' },
  { pre: 'strong', post: 'medium', name: 'strong+medium' },
  { pre: 'strong', post: 'strong', name: 'strong+strong' },
  { pre: 'strong', post: 'weak', name: 'strong+weak' },
  { pre: 'medium', post: 'strong', name: 'medium+strong' },
  { pre: 'medium', post: 'medium', name: 'medium+medium' },
  { pre: 'medium', post: 'weak', name: 'medium+weak' },
  { pre: 'strongV3', post: 'strong', name: 'strongV3+strong' }
];

// --- –ï–¥–∏–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ ---
const ocrTemplatesKeyboard = [[{ text: '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Å–µ–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏', callback_data: 'ocr_all_templates' }]];

// –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É
bot.on(["photo"], async (ctx) => {
  const userId = ctx.from.id;
  if (userStates[userId] === "awaiting_ai_prompt" || userStates[userId] === "chatting_ai") {
    userStates[userId] = "chatting_ai";
    const photo = ctx.message.photo.pop();
    const fileId = photo.file_id;
    const fileLink = await ctx.telegram.getFileLink(fileId);
    const filePath = path.join(tempPath, `${userId}_${Date.now()}.jpg`);
    await fs.ensureDir(tempPath);
    const res = await fetch(fileLink.href);
    const buffer = await res.arrayBuffer();
    await fs.writeFile(filePath, Buffer.from(buffer));
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏—é
    if (!ctx.session) ctx.session = {};
    ctx.session.lastPhotoPath = filePath;
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ 1 –∫–Ω–æ–ø–∫–∏
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR:", Markup.inlineKeyboard(ocrTemplatesKeyboard));
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Å–µ–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏"
bot.action('ocr_all_templates', async (ctx) => {
  try {
    const filePath = ctx.session && ctx.session.lastPhotoPath;
    if (!filePath || !fs.existsSync(filePath)) {
      await ctx.reply('–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.');
      return;
    }
    await ctx.reply('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤—Å–µ–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏...');
    const allResults = [];
    for (let i = 0; i < ocrTemplates.length; ++i) {
      const tpl = ocrTemplates[i];
      logger.info(`[BOT] –°—Ç–∞—Ä—Ç —à–∞–±–ª–æ–Ω–∞ ${i+1}: ${tpl.name}`);
      await ctx.reply(`–ò—Å–ø–æ–ª—å–∑—É—é —à–∞–±–ª–æ–Ω ${i+1}: ${tpl.name}`);
      let tesseractText = '';
      try {
        const { recognizeTextWithTemplateTesseract } = require("./modules/ocr");
        tesseractText = await recognizeTextWithTemplateTesseract(filePath, tpl.pre, tpl.post);
        logger.info(`[BOT] –ó–∞–≤–µ—Ä—à—ë–Ω —à–∞–±–ª–æ–Ω ${i+1}: ${tpl.name}`);
      } catch (e) {
        tesseractText = `–û—à–∏–±–∫–∞ Tesseract: ${e.message}`;
        logger.error(`[BOT] –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞ ${i+1}: ${tpl.name}: ${e.message}`);
      }
      allResults.push({ tplName: tpl.name, text: tesseractText });
      try {
        await ctx.replyWithHTML(
          `<b>–®–∞–±–ª–æ–Ω ${i+1}: ${tpl.name}</b>\n\n<b>Tesseract:</b>\n${tesseractText}`
        );
        logger.info(`[BOT] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ —à–∞–±–ª–æ–Ω—É ${i+1}: ${tpl.name}`);
      } catch (err) {
        logger.error(`[BOT] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É ${i+1}: ${tpl.name}: ${err.message}`);
      }
    }
    // --- –ù–æ–≤—ã–π —ç—Ç–∞–ø: "—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞" –∏–∑ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ ---
    const semanticResult = semanticOcrAssemble(allResults);
    await ctx.replyWithHTML(
      `<b>üèÜ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ OCR (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤)</b>\n\n<pre>${semanticResult}</pre>`
    );
    logger.info(`[BOT] –í—Å–µ —à–∞–±–ª–æ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
  } catch (e) {
    logger.error(`[BOT] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ ocr_all_templates: ${e.message}`);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: ' + e.message);
  }
});

// --- –§—É–Ω–∫—Ü–∏—è: –æ—á–∏—Å—Ç–∫–∞ –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ OCR ---
function cleanAndSelectBestOcrResult(results) {
  // results: [{ tplName, text }]
  // 1. –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏: —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ > 10
  function cleanText(text) {
    return text
      .split(/\n|\r|\f|\v|\u2028|\u2029|\u0085/)
      .map(line => line.replace(/[^–∞-—è–ê-–Ø—ë–Å0-9a-zA-Z.,:;!?()\-\s]/g, ''))
      .map(line => line.trim())
      .filter(line => line.length > 10 && /[–∞-—è–ê-–Ø—ë–Å]/.test(line))
      .join('\n');
  }
  // 2. –°—á–∏—Ç–∞–µ–º "–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ" —Å–ª–æ–≤–∞ (—Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π > 2)
  function countWords(text) {
    return (text.match(/[–∞-—è–ê-–Ø—ë–Å]{3,}/g) || []).length;
  }
  // 3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: —á–∏—Å—Ç–∏–º, —Å—á–∏—Ç–∞–µ–º —Å–ª–æ–≤–∞
  const processed = results.map(r => {
    const cleaned = cleanText(r.text);
    return {
      tplName: r.tplName,
      cleaned,
      wordCount: countWords(cleaned)
    };
  });
  // 4. –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º "–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã—Ö" —Å–ª–æ–≤
  const best = processed.reduce((max, cur) => (cur.wordCount > max.wordCount ? cur : max), processed[0]);
  return best;
}

// --- –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º: "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞" –∏–∑ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ OCR ---
function semanticOcrAssemble(results) {
  // results: [{ tplName, text }]
  // 1. –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
  function cleanLines(text) {
    return text
      .split(/\n|\r|\f|\v|\u2028|\u2029|\u0085/)
      .map(line => line.replace(/[^–∞-—è–ê-–Ø—ë–Å0-9a-zA-Z.,:;!?()\-\s]/g, ''))
      .map(line => line.trim())
      .filter(line => line.length > 8 && /[–∞-—è–ê-–Ø—ë–Å]/.test(line));
  }
  // 2. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
  let allLines = [];
  results.forEach(r => {
    allLines = allLines.concat(cleanLines(r.text));
  });
  // 3. –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
  const freq = {};
  allLines.forEach(line => {
    freq[line] = (freq[line] || 0) + 1;
  });
  // 4. –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ (—É–±—ã–≤–∞–Ω–∏–µ), –∑–∞—Ç–µ–º –ø–æ –¥–ª–∏–Ω–µ (—É–±—ã–≤–∞–Ω–∏–µ)
  const uniqueLines = [...new Set(allLines)];
  uniqueLines.sort((a, b) => freq[b] - freq[a] || b.length - a.length);
  // 5. –°–∫–ª–µ–∏–≤–∞–µ–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
  return uniqueLines.join('\n');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç")
bot.action("generate_test", async (ctx) => {
  try {
    await streamAIResponse("–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç", ctx);
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: " + err.message);
    await ctx.reply(ui.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: " + err.message));
  }
});

// –ö–Ω–æ–ø–∫–∞ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö—ç—à–∞" ‚Äî —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
bot.action("generate_cache", async (ctx) => {
  cacheQueue.push({ ctx });
  await ctx.answerCbQuery("‚è≥ –ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.");
  await sendProgress(ctx, `–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫—ç—à–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–∑–∏—Ü–∏—è: ${cacheQueue.length}`);
  processCacheQueue();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
async function uploadToYandexDisk(localFilePath, remoteFilePath, ctx) {
  try {
    await yadisk.uploadFile(localFilePath, remoteFilePath);
    logAndNotify(`–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø.–î–∏—Å–∫: ${remoteFilePath}`, ctx);
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø.–î–∏—Å–∫: " + error.message);
    logAndNotify(ui.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø.–î–∏—Å–∫: " + error.message), ctx);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.");
  }
}

function saveToCacheAndSync(question, answer, ctx = null) {
  saveToCacheHistory(question, answer);

  const localPath = path.join(cachePath, "dataset.json");
  const remotePath = "/bot_cache/dataset.json";
  exportCacheToJsonFile(localPath, async (err) => {
    if (!err) {
      try {
        await uploadCacheJsonToYadisk(yadisk, localPath, remotePath);
        if (ctx) await ctx.reply(ui.cacheSynced);
        notifyAdmin(ui.cacheSynced);
        logger.info("–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω!");
      } catch (e) {
        if (ctx) await ctx.reply(ui.error(e.message));
        notifyAdmin(ui.error(e.message));
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: " + e.message);
      }
    } else {
      if (ctx) await ctx.reply(ui.error(err.message));
      notifyAdmin(ui.error(err.message));
      logger.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫—ç—à–∞ –≤ JSON: " + err.message);
    }
  });
}

// --- –£–¢–ò–õ–ò–¢–ê: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ Telegram –≤ temp ---
async function downloadFile(file, userId) {
  const tempPath = path.join(__dirname, 'temp');
  await fs.ensureDir(tempPath);
  const ext = path.extname(file.file_path || '.jpg');
  const fileName = `${userId}_${Date.now()}${ext}`;
  const dest = path.join(tempPath, fileName);
  const fileLink = await bot.telegram.getFileLink(file.file_id);

  const res = await fetch(fileLink.href);
  if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${res.statusText}`);
  // –î–ª—è node >=18 –∏—Å–ø–æ–ª—å–∑—É–µ–º arrayBuffer, –¥–ª—è node-fetch@2 ‚Äî buffer
  let buffer;
  if (typeof res.arrayBuffer === 'function') {
    buffer = Buffer.from(await res.arrayBuffer());
  } else {
    buffer = await res.buffer();
  }
  await fs.writeFile(dest, buffer);
  return dest;
}

module.exports = {
    app,
    bot,
    mainMenuKeyboard,
    parseDocxToText,
    splitTextByLength,
    saveToCacheAndSync,
    fuzzyFindInYandexDisk
  };
