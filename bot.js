// –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const path = require("path");
const { spawn } = require('child_process');
require("dotenv").config();

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const database = require("./modules/database");
const gptModel = require("./modules/gpt");
const docxProcessor = require("./modules/docx");
const BotHandlers = require("./modules/handlers");
const logger = require("./modules/logger");

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const PORT = process.env.PORT || 3000;
const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN, {
    handlerTimeout: 300000 // 5 –º–∏–Ω—É—Ç
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
let activeTestCacheProcess = null;

async function startApp() {
    try {
        logger.info('–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        database.initCache();
        await gptModel.init();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
        app.use("/static", express.static(path.join(__dirname, "static")));

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
        BotHandlers.setupMainMenu(bot);

        // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        app.listen(PORT, () => {
            logger.info(`Express-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        });

        bot.launch();
        logger.info('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
        logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', { error });
        process.exit(1);
    }
}

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—ç—à–∞
bot.command('cache', (ctx) => {
    database.db.all("SELECT * FROM gpt_cache ORDER BY created_at DESC LIMIT 10", (err, rows) => {
        if (err) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—ç—à–∞', { error: err });
            return ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—ç—à–∞.");
        }

        if (rows.length === 0) {
            return ctx.reply("üìÇ –ö—ç—à –ø—É—Å—Ç.");
        }

        let message = "üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞:\n\n";
        rows.forEach((row, index) => {
            message += `${index + 1}. [${row.created_at}]\n`;
            message += `–ü—Ä–æ–º–ø—Ç: ${row.prompt.slice(0, 50)}...\n`;
            message += `–û—Ç–≤–µ—Ç: ${row.response.slice(0, 50)}...\n\n`;
        });

        ctx.reply(message);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
bot.action("open_materials", async (ctx) => {
    const files = await docxProcessor.listFiles();

    if (files.length === 0) {
        return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.");
    }

    const buttons = files.map((file) => [
        Markup.button.callback(file, `material:${file}`),
    ]);

    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", Markup.inlineKeyboard(buttons));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞');
    bot.stop('SIGINT');
    database.close();
});

process.once('SIGTERM', () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞');
    bot.stop('SIGTERM');
    database.close();
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startApp().catch((err) => {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', { error: err });
    process.exit(1);
});
