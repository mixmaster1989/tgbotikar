const fs = require("fs");
const path = require("path");
const { Markup } = require("telegraf");
const { yadisk, db } = require("./services");
const { generateAIQuestions, parseDocxToText, parseTestResponse } = require("./utils");

async function syncMaterials() {
  try {
    console.log("–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º...");
    const response = await fetch("https://cloud-api.yandex.net/v1/disk/resources/files", {
      headers: { Authorization: `OAuth ${process.env.YA_DISK_TOKEN}` },
    });

    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º");

    const data = await response.json();
    console.log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${data.items.length}`);
    return data.items.map(item => item.name);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", err);
    return [];
  }
}

function saveToCache(question, answer) {
  try {
    console.log("–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –∫—ç—à...");
    const stmt = db.prepare("INSERT OR REPLACE INTO gpt_cache (prompt, response) VALUES (?, ?)");
    stmt.run(question, answer);
    stmt.finalize();
    console.log("–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à.");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à:", err);
  }
}

async function generateCache(ctx) {
  try {
    console.log("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞...");
    const files = await syncMaterials();
    if (!files.length) {
      console.log("–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞.");
      return ctx.reply("–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞.");
    }

    const randomFile = files[Math.floor(Math.random() * files.length)];
    const filePath = path.join(process.env.MATERIALS_PATH, randomFile);

    console.log(`–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${randomFile}`);
    const content = await parseDocxToText(filePath);
    console.log("–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω.");

    const questionResponse = await generateAIQuestions(content);
    const parsed = parseTestResponse(questionResponse);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    saveToCache(parsed.question, parsed.correct);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    const jsonFilePath = path.join(__dirname, "cache", `${randomFile.replace(".docx", "")}.json`);
    const jsonData = {
      question: parsed.question,
      answers: parsed.answers,
      correct: parsed.correct,
    };
    fs.writeFileSync(jsonFilePath, JSON.stringify(jsonData, null, 2));

    console.log(`–§–∞–π–ª JSON —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ –¥–∏—Å–∫: ${jsonFilePath}`);
    await yadisk.uploadFile(jsonFilePath, `/cache/${path.basename(jsonFilePath)}`);
    console.log("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.");

    await ctx.reply("–ö—ç—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", mainMenuKeyboard());
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞.");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—ç—à–∞"
bot.action("generate_cache", generateCache);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫—ç—à–∞"
bot.action("cache_ops", async (ctx) => {
  try {
    console.log("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—ç—à–µ–π —Å –Ø.–î–∏—Å–∫–∞...");
    const files = await yadisk.syncMaterials();
    const cacheFiles = files.filter(file => file.endsWith(".json"));
    if (cacheFiles.length === 0) {
      console.log("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∫—ç—à–∞.");
      return ctx.reply("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∫—ç—à–∞.");
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞: ${cacheFiles.length}`);
    const buttons = cacheFiles.map(f => [Markup.button.callback(f, `open_cache_${f}`)]);
    buttons.push([Markup.button.callback("üîÑ –†–µ–∑–µ—Ç", "reset")]);

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫—ç—à:", Markup.inlineKeyboard(buttons));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ —Å –Ø.–î–∏—Å–∫–∞:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∞.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞
bot.action(/open_cache_(.+)/, async (ctx) => {
  const fileName = ctx.match[1];
  const filePath = path.join(__dirname, "cache", fileName);
  try {
    console.log(`–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫—ç—à–∞: ${fileName}`);
    await ctx.replyWithDocument({ source: filePath, filename: fileName });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:", err);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.");
  }
});
