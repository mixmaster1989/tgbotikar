const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');

class YaDiskService {
    constructor(token) {
        if (!token) {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞');
        }

        this.token = token;
        this.api = axios.create({
            baseURL: 'https://cloud-api.yandex.net/v1/disk/resources',
            headers: {
                'Authorization': `OAuth ${token}`
            }
        });
        this.materialsPath = path.join(__dirname, '..', 'materials');
    }

    async checkAccess() {
        try {
            const response = await this.api.get('/disk');
            console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
            return true;
        } catch (error) {
            if (error.response?.status === 403) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
                console.error('üëâ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å.OAuth');
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É');
            }
            throw error;
        }
    }

    async syncMaterials() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            await this.checkAccess();

            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É materials –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            await fs.ensureDir(this.materialsPath);

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
            const response = await this.api.get('', {
                params: {
                    path: '/materials',
                    limit: 100
                }
            });

            const files = response.data._embedded.items.filter(
                item => item.type === 'file' && item.name.endsWith('.docx')
            );

            console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${files.length} docx —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ`);

            // –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for (const file of files) {
                const localPath = path.join(this.materialsPath, file.name);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª
                const needsUpdate = !(await fs.pathExists(localPath)) ||
                    (await fs.stat(localPath)).mtime < new Date(file.modified);

                if (needsUpdate) {
                    console.log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ${file.name}...`);
                    await this.downloadFile(file);
                }
            }

            return files.map(f => f.name);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
            throw error;
        }
    }

    async downloadFile(file) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            const downloadResponse = await this.api.get('/download', {
                params: { path: file.path }
            });

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const response = await axios({
                method: 'GET',
                url: downloadResponse.data.href,
                responseType: 'stream'
            });

            const localPath = path.join(this.materialsPath, file.name);
            const writer = fs.createWriteStream(localPath);

            response.data.pipe(writer);

            return new Promise((resolve, reject) => {
                writer.on('finish', () => {
                    console.log(`‚úÖ –§–∞–π–ª ${file.name} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω`);
                    resolve(localPath);
                });
                writer.on('error', reject);
            });
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ ${file.name}:`, error.message);
            throw error;
        }
    }
}

module.exports = YaDiskService;